#!/usr/bin/env node
import fs from "node:fs";
import path from "node:path";

/**
 * src/generated 配下の *.msw.ts（index.msw.ts を除く）を全て集め、
 * それらのエクスポート値を配列にフラット化して handlers として再書き出します。
 * 出力先: src/mocks/handlers.ts
 */

const GENERATED_ROOT = path.resolve("src/generated");
const OUTPUT_FILE = path.resolve("src/mocks/handlers.ts");

// 再帰的に *.msw.ts を列挙（index.msw.ts は除外）
function listMswFiles(dir: string, acc: string[] = []): string[] {
  for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {
    const full = path.join(dir, entry.name);
    if (entry.isDirectory()) {
      listMswFiles(full, acc);
    } else if (
      entry.isFile() &&
      entry.name.endsWith(".msw.ts") &&
      entry.name !== "index.msw.ts"
    ) {
      acc.push(full);
    }
  }
  return acc;
}

const files = fs.existsSync(GENERATED_ROOT) ? listMswFiles(GENERATED_ROOT) : [];

// 生成: 相対 import とハンドラ配列
const imports: string[] = [];
const modulesArrayName = "_mods";

files.forEach((absPath, i) => {
  const relFromOut = `./${path
    .relative(path.dirname(OUTPUT_FILE), absPath)
    .replace(/\\/g, "/")
    .replace(/\.ts$/, "")}`;
  const varName = `m${i}`;
  imports.push(`import * as ${varName} from ${JSON.stringify(relFromOut)};`);
});

// 予備として index.msw.ts が handlers を輸出している場合は先頭に含める
const indexMswPath = path.join(GENERATED_ROOT, "index.msw.ts");
let includeIndex = false;
if (fs.existsSync(indexMswPath)) {
  const relFromOut = `./${path
    .relative(path.dirname(OUTPUT_FILE), indexMswPath)
    .replace(/\\/g, "/")
    .replace(/\.ts$/, "")}`;
  imports.unshift(`import * as _idx from ${JSON.stringify(relFromOut)};`);
  includeIndex = true;
}

const content = `/* AUTO-GENERATED by scripts/gen-msw-handlers.ts — do not edit */
${imports.join("\n")}
import type { RequestHandler } from "msw";

const ${modulesArrayName} = [
  ${includeIndex ? "_idx," : ""}${files.map((_, i) => `m${i}`).join(", ")}
];

function toArray<T>(v: T): T[] {
  return Array.isArray(v) ? v : [v];
}

export const handlers: RequestHandler[] = ${modulesArrayName}
  .flatMap((mod: Record<string, unknown>) => {
    // biome-ignore lint/suspicious/noExplicitAny: Ignore
    const h = (mod as any).handlers;
    if (Array.isArray(h)) return h;
    // それ以外の export に配列があればそれも展開（orvalの各 msw モジュール事情に合わせた保険）
    return Object.values(mod).filter(Array.isArray).flat() as unknown[];
  })
  // 念のため型ナロー（実質的には cast）
  .filter(Boolean) as RequestHandler[];
`;

fs.mkdirSync(path.dirname(OUTPUT_FILE), { recursive: true });
fs.writeFileSync(OUTPUT_FILE, content, "utf8");

console.log(
  `[gen-msw-handlers] wrote ${path.relative(process.cwd(), OUTPUT_FILE)} from ${files.length}${includeIndex ? " + index.msw.ts" : ""} source(s)`,
);
