/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
export type Answer =
  | BooleanAnswer
  | FreeTextAnswer
  | SingleChoiceAnswer
  | MultipleChoiceAnswer;

export type AnswerId = string;

export type AnswerType = (typeof AnswerType)[keyof typeof AnswerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AnswerType = {
  boolean: "boolean",
  free_text: "free_text",
  single_choice: "single_choice",
  multiple_choice: "multiple_choice",
} as const;

export type ApprovalRequestDecision =
  (typeof ApprovalRequestDecision)[keyof typeof ApprovalRequestDecision];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ApprovalRequestDecision = {
  approved: "approved",
  rejected: "rejected",
} as const;

export interface ApprovalRequest {
  decision: ApprovalRequestDecision;
  reviewerNotes?: string;
  publishImmediately?: boolean;
}

export interface Attempt {
  id: AttemptId;
  quizId: QuizId;
  sessionId: SessionId;
  userId: UserId;
  answerType: AnswerType;
  answerId: AnswerId;
  isCorrect: boolean;
  answeredAt: UtcDateTime;
}

export type AttemptHistoryResponseAllOf = {
  items: AttemptWithAnswer[];
  totalCount: number;
  hasMore: boolean;
  continuationToken?: string;
};

export type AttemptHistoryResponse = AttemptHistoryResponseAllOf;

export type AttemptId = string;

export type AttemptStatisticsByAnswerType = { [key: string]: unknown };

export interface AttemptStatistics {
  totalAttempts: number;
  correctAttempts: number;
  incorrectAttempts: number;
  averageCorrectRate: number;
  byAnswerType: AttemptStatisticsByAnswerType;
  recentStreak: number;
}

export interface AttemptWithAnswer {
  id: AttemptId;
  quizId: QuizId;
  sessionId: SessionId;
  userId: UserId;
  answerType: AnswerType;
  answerId: AnswerId;
  isCorrect: boolean;
  answeredAt: UtcDateTime;
  answer: Answer;
}

export type BooleanAnswerType =
  (typeof BooleanAnswerType)[keyof typeof BooleanAnswerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BooleanAnswerType = {
  boolean: "boolean",
} as const;

export interface BooleanAnswer {
  type: BooleanAnswerType;
  id: AnswerId;
  value: boolean;
}

export type BooleanSolutionType =
  (typeof BooleanSolutionType)[keyof typeof BooleanSolutionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BooleanSolutionType = {
  boolean: "boolean",
} as const;

export interface BooleanSolution {
  type: BooleanSolutionType;
  id: SolutionId;
  value: boolean;
}

export interface Choice {
  id: ChoiceId;
  solutionId: SolutionId;
  text: string;
  orderIndex: number;
}

export type ChoiceId = string;

export type ConflictErrorCode =
  (typeof ConflictErrorCode)[keyof typeof ConflictErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConflictErrorCode = {
  NUMBER_409: 409,
} as const;

export type ConflictErrorMessage =
  (typeof ConflictErrorMessage)[keyof typeof ConflictErrorMessage];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConflictErrorMessage = {
  Resource_conflict: "Resource conflict",
} as const;

export type ConflictError = ErrorResponse & {
  code: ConflictErrorCode;
  message: ConflictErrorMessage;
};

export interface CreateDeckFromSearchRequest {
  searchQuery: string;
  filters?: QuizSearchFilters;
  maxQuizzes?: number;
  name?: string;
  description?: string;
}

export type CreateDeckRequestSource =
  (typeof CreateDeckRequestSource)[keyof typeof CreateDeckRequestSource];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateDeckRequestSource = {
  manual_selection: "manual_selection",
  search_result: "search_result",
  wrong_questions: "wrong_questions",
} as const;

export interface CreateDeckRequest {
  name?: string;
  description?: string;
  quizIds: QuizId[];
  source: CreateDeckRequestSource;
  sourceQuery?: string;
  maxQuizzes?: number;
  shuffleOrder?: boolean;
}

export interface CreateDeckResponse {
  deck: Deck;
  session?: QuizSession;
}

export interface CreateQuizRequest {
  question: string;
  answerType: AnswerType;
  solution: Solution;
  explanation?: string;
  tags?: string[];
}

export type CreateQuizResponseStatus =
  (typeof CreateQuizResponseStatus)[keyof typeof CreateQuizResponseStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CreateQuizResponseStatus = {
  pending_approval: "pending_approval",
} as const;

export interface CreateQuizResponse {
  quiz: Quiz;
  status: CreateQuizResponseStatus;
  estimatedApprovalDate?: UtcDateTime;
}

export interface CreateUserAccountRequest {
  name: string;
  email?: string;
}

export interface CreateUserAccountResponse {
  userAccount: UserAccount;
  userIdentity: UserIdentity;
}

export interface Deck {
  id: DeckId;
  name: string;
  description?: string;
  quizIds: QuizId[];
  creatorId: UserId;
  createdAt: UtcDateTime;
  lastModifiedAt: UtcDateTime;
}

export type DeckId = string;

export type DeckListResponseAllOf = {
  items: DeckWithQuizzes[];
  totalCount: number;
  hasMore: boolean;
  continuationToken?: string;
};

export type DeckListResponse = DeckListResponseAllOf;

export interface DeckWithQuizzes {
  id: DeckId;
  name: string;
  description?: string;
  quizIds: QuizId[];
  creatorId: UserId;
  createdAt: UtcDateTime;
  lastModifiedAt: UtcDateTime;
  quizzes: QuizWithSolution[];
  totalQuizzes: number;
}

export interface ErrorResponse {
  code: number;
  message: string;
  details?: string;
  requestId?: string;
}

export type ForbiddenErrorCode =
  (typeof ForbiddenErrorCode)[keyof typeof ForbiddenErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ForbiddenErrorCode = {
  NUMBER_403: 403,
} as const;

export type ForbiddenErrorMessage =
  (typeof ForbiddenErrorMessage)[keyof typeof ForbiddenErrorMessage];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ForbiddenErrorMessage = {
  Forbidden_operation: "Forbidden operation",
} as const;

export type ForbiddenError = ErrorResponse & {
  code: ForbiddenErrorCode;
  message: ForbiddenErrorMessage;
};

export type FreeTextAnswerType =
  (typeof FreeTextAnswerType)[keyof typeof FreeTextAnswerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FreeTextAnswerType = {
  free_text: "free_text",
} as const;

export interface FreeTextAnswer {
  type: FreeTextAnswerType;
  id: AnswerId;
  text: string;
}

export type FreeTextSolutionType =
  (typeof FreeTextSolutionType)[keyof typeof FreeTextSolutionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FreeTextSolutionType = {
  free_text: "free_text",
} as const;

export interface FreeTextSolution {
  type: FreeTextSolutionType;
  id: SolutionId;
  correctAnswer: string;
  matchingStrategy: MatchingStrategy;
  caseSensitive: boolean;
}

export type InternalServerErrorCode =
  (typeof InternalServerErrorCode)[keyof typeof InternalServerErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InternalServerErrorCode = {
  NUMBER_500: 500,
} as const;

export type InternalServerErrorMessage =
  (typeof InternalServerErrorMessage)[keyof typeof InternalServerErrorMessage];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InternalServerErrorMessage = {
  Internal_server_error: "Internal server error",
} as const;

export type InternalServerError = ErrorResponse & {
  code: InternalServerErrorCode;
  message: InternalServerErrorMessage;
};

export type MatchingStrategy =
  (typeof MatchingStrategy)[keyof typeof MatchingStrategy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MatchingStrategy = {
  exact: "exact",
  partial: "partial",
  regex: "regex",
} as const;

export type MultipleChoiceAnswerType =
  (typeof MultipleChoiceAnswerType)[keyof typeof MultipleChoiceAnswerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultipleChoiceAnswerType = {
  multiple_choice: "multiple_choice",
} as const;

export interface MultipleChoiceAnswer {
  type: MultipleChoiceAnswerType;
  id: AnswerId;
  selectedChoiceIds: ChoiceId[];
}

export type MultipleChoiceSolutionType =
  (typeof MultipleChoiceSolutionType)[keyof typeof MultipleChoiceSolutionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MultipleChoiceSolutionType = {
  multiple_choice: "multiple_choice",
} as const;

export interface MultipleChoiceSolution {
  type: MultipleChoiceSolutionType;
  id: SolutionId;
  correctChoiceIds: ChoiceId[];
  minCorrectAnswers: number;
  choices: Choice[];
}

export type NotFoundErrorCode =
  (typeof NotFoundErrorCode)[keyof typeof NotFoundErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotFoundErrorCode = {
  NUMBER_404: 404,
} as const;

export type NotFoundErrorMessage =
  (typeof NotFoundErrorMessage)[keyof typeof NotFoundErrorMessage];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NotFoundErrorMessage = {
  Resource_not_found: "Resource not found",
} as const;

export type NotFoundError = ErrorResponse & {
  code: NotFoundErrorCode;
  message: NotFoundErrorMessage;
};

export interface PaginationRequest {
  /** Maximum number of items to return per page (1-100). Default: 20 */
  limit?: number;
  /** Number of items to skip from the beginning of the result set. Default: 0 */
  offset?: number;
  /** Token for cursor-based pagination (optional, for future implementation) */
  continuationToken?: string;
}

export interface Quiz {
  id: QuizId;
  question: string;
  answerType: AnswerType;
  solutionId: SolutionId;
  explanation?: string;
  status: QuizStatus;
  creatorId: UserId;
  createdAt: UtcDateTime;
  approvedAt?: UtcDateTime;
}

export type QuizId = string;

export type QuizListResponseAllOf = {
  items: QuizWithSolution[];
  totalCount: number;
  hasMore: boolean;
  continuationToken?: string;
};

export type QuizListResponse = QuizListResponseAllOf;

export interface QuizSearchFilters {
  tags?: string[];
  difficulty?: string;
  answerType?: AnswerType;
  status?: QuizStatus;
  creatorId?: UserId;
}

export interface QuizSession {
  id: SessionId;
  deckId: DeckId;
  creatorId: UserId;
  deviceFingerprint: string;
  startedAt: UtcDateTime;
  completedAt?: UtcDateTime;
  isCompleted: boolean;
}

export interface QuizSessionWithProgress {
  id: SessionId;
  deckId: DeckId;
  creatorId: UserId;
  deviceFingerprint: string;
  startedAt: UtcDateTime;
  completedAt?: UtcDateTime;
  isCompleted: boolean;
  deck: Deck;
  progress: SessionProgress;
}

export type QuizStatus = (typeof QuizStatus)[keyof typeof QuizStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QuizStatus = {
  pending_approval: "pending_approval",
  approved: "approved",
  rejected: "rejected",
} as const;

export type QuizTagId = string;

export interface QuizWithSolution {
  id: QuizId;
  question: string;
  answerType: AnswerType;
  solutionId: SolutionId;
  explanation?: string;
  status: QuizStatus;
  creatorId: UserId;
  createdAt: UtcDateTime;
  approvedAt?: UtcDateTime;
  solution: Solution;
  tags?: string[];
}

export type RateLimitErrorCode =
  (typeof RateLimitErrorCode)[keyof typeof RateLimitErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RateLimitErrorCode = {
  NUMBER_429: 429,
} as const;

export type RateLimitErrorMessage =
  (typeof RateLimitErrorMessage)[keyof typeof RateLimitErrorMessage];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RateLimitErrorMessage = {
  Rate_limit_exceeded: "Rate limit exceeded",
} as const;

export type RateLimitError = ErrorResponse & {
  code: RateLimitErrorCode;
  message: RateLimitErrorMessage;
};

export type RelationType = (typeof RelationType)[keyof typeof RelationType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RelationType = {
  hierarchy: "hierarchy",
  category: "category",
  synonym: "synonym",
  related: "related",
} as const;

export type SessionId = string;

export type SessionListResponseAllOf = {
  items: QuizSessionWithProgress[];
  totalCount: number;
  hasMore: boolean;
  continuationToken?: string;
};

export type SessionListResponse = SessionListResponseAllOf;

export interface SessionProgress {
  totalQuizzes: number;
  answeredQuizzes: number;
  correctAnswers: number;
  incorrectAnswers: number;
  progressPercentage: number;
  currentQuizIndex?: number;
  nextQuizId?: QuizId;
}

export type SingleChoiceAnswerType =
  (typeof SingleChoiceAnswerType)[keyof typeof SingleChoiceAnswerType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SingleChoiceAnswerType = {
  single_choice: "single_choice",
} as const;

export interface SingleChoiceAnswer {
  type: SingleChoiceAnswerType;
  id: AnswerId;
  selectedChoiceId: ChoiceId;
}

export type SingleChoiceSolutionType =
  (typeof SingleChoiceSolutionType)[keyof typeof SingleChoiceSolutionType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SingleChoiceSolutionType = {
  single_choice: "single_choice",
} as const;

export interface SingleChoiceSolution {
  type: SingleChoiceSolutionType;
  id: SolutionId;
  correctChoiceId: ChoiceId;
  choices: Choice[];
}

export type Solution =
  | BooleanSolution
  | FreeTextSolution
  | SingleChoiceSolution
  | MultipleChoiceSolution;

export type SolutionId = string;

export interface StartSessionRequest {
  deckId: DeckId;
  deviceFingerprint: string;
  shuffleQuizzes?: boolean;
}

export interface StartSessionResponse {
  session: QuizSessionWithProgress;
  firstQuiz?: QuizWithSolution;
}

export interface SubmitAnswerRequest {
  sessionId: SessionId;
  quizId: QuizId;
  answer: Answer;
}

export interface SubmitAnswerResponse {
  attempt: AttemptWithAnswer;
  isCorrect: boolean;
  explanation?: string;
  correctAnswer: Answer;
}

export interface Tag {
  id: TagId;
  name: string;
  type: TagType;
  createdBy?: UserId;
  createdAt: UtcDateTime;
}

export type TagId = string;

export type TagRelationId = string;

export type TagType = (typeof TagType)[keyof typeof TagType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TagType = {
  official: "official",
  user: "user",
} as const;

export type UnauthorizedErrorCode =
  (typeof UnauthorizedErrorCode)[keyof typeof UnauthorizedErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnauthorizedErrorCode = {
  NUMBER_401: 401,
} as const;

export type UnauthorizedErrorMessage =
  (typeof UnauthorizedErrorMessage)[keyof typeof UnauthorizedErrorMessage];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UnauthorizedErrorMessage = {
  Unauthorized_access: "Unauthorized access",
} as const;

export type UnauthorizedError = ErrorResponse & {
  code: UnauthorizedErrorCode;
  message: UnauthorizedErrorMessage;
};

export interface UpdateQuizRequest {
  question?: string;
  explanation?: string;
  tags?: string[];
}

export interface UpdateSessionRequest {
  isCompleted?: boolean;
}

export interface UpdateUserAccountRequest {
  name?: string;
  email?: string;
}

export interface UserAccount {
  id: UserAccountId;
  name: string;
  email?: string;
  createdAt: UtcDateTime;
}

export type UserAccountId = string;

export type UserId = string;

export interface UserIdentity {
  id: UserId;
  anonymousId: string;
  userAccountId?: UserAccountId;
  createdAt: UtcDateTime;
}

export interface UserProfileResponse {
  userAccount?: UserAccount;
  userIdentity: UserIdentity;
  statistics: UserStatistics;
}

export interface UserStatistics {
  totalQuizzes: number;
  totalAttempts: number;
  correctAnswers: number;
  averageCorrectRate: number;
  streak: number;
}

export type UtcDateTime = string;

export type ValidationErrorCode =
  (typeof ValidationErrorCode)[keyof typeof ValidationErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationErrorCode = {
  NUMBER_400: 400,
} as const;

export type ValidationErrorFieldErrors = { [key: string]: unknown };

export type ValidationError = ErrorResponse & {
  code: ValidationErrorCode;
  fieldErrors?: ValidationErrorFieldErrors;
};

export type QuizManagementCreateQuizDefault = ValidationError | RateLimitError;

export type QuizManagementListQuizzesParams = {
  /**
   * „Çπ„ÉÜ„Éº„Çø„ÇπÂà•„Éï„Ç£„É´„Çø„Éº„ÄÇÊåáÂÆö„Åï„Çå„Å™„ÅÑÂ†¥Âêà„ÅØÂÖ®„Çπ„ÉÜ„Éº„Çø„ÇπÔºàÊ®©Èôê„Å´Âøú„Åò„Å¶Ôºâ
   */
  status?: QuizStatus;
  /**
   * ‰ΩúÊàêËÄÖIDÂà•„Éï„Ç£„É´„Çø„Éº„ÄÇÁâπÂÆö„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê„ÇØ„Ç§„Ç∫„ÅÆ„ÅøÂèñÂæó
   */
  creatorId?: UserId;
  /**
   * „ÇØ„Ç§„Ç∫IDÈÖçÂàó„Å´„Çà„ÇãÊåáÂÆöÂèñÂæó„ÄÇË§áÊï∞ID„ÅÆ‰∏ÄÊã¨ÂèñÂæó„Å´‰ΩøÁî®
   */
  ids?: string[];
};

export type QuizManagementUpdateQuizDefault =
  | NotFoundError
  | ForbiddenError
  | ValidationError;

export type QuizManagementDeleteQuizDefault = NotFoundError | ForbiddenError;

export type SearchSearchQuizzesParams = {
  /**
   * ÂïèÈ°åÊñá„ÄÅËß£Ë™¨„ÄÅÈñ¢ÈÄ£„Çø„Ç∞ÂÖ®‰Ωì„Åß„ÅÆÂÖ®ÊñáÊ§úÁ¥¢„ÇØ„Ç®„É™
   */
  q?: string;
  /**
 * „ÇØ„Ç§„Ç∫ÂàÜÈ°ûÁî®„Çø„Ç∞„Éï„Ç£„É´„Çø„Éº„ÄÇÂåÖÂê´„ÉªÈô§Â§ñ‰∏°Êñπ„ÅÆÊåáÂÆö„ÅåÂèØËÉΩÔºö
- ÂåÖÂê´„Çø„Ç∞: `tags=javascript` „Åæ„Åü„ÅØ `tags=javascript&tags=react`
- Èô§Â§ñ„Çø„Ç∞: `tags=~beginner` (ÂàùÂøÉËÄÖ„É¨„Éô„É´„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÈô§Â§ñ)
- Ê∑∑Âêà„Éï„Ç£„É´„Çø„Éº: `tags=javascript&tags=~tutorial` (JavaScript„ÇíÂê´„Åø„ÄÅ„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´„ÇíÈô§Â§ñ)
 */
  tags?: string[];
  /**
   * Èõ£ÊòìÂ∫¶„É¨„Éô„É´„Å´„Çà„Çã„Éï„Ç£„É´„Çø„Éº„ÄÇ‰∏ÄËà¨ÁöÑ„Å™ÂÄ§Ôºö'beginner'„ÄÅ'intermediate'„ÄÅ'advanced'
   */
  difficulty?: string;
  /**
   * ÂõûÁ≠î„Çø„Ç§„Éó„Å´„Çà„Çã„Éï„Ç£„É´„Çø„Éº„ÄÇÊúâÂäπ„Å™ÂÄ§Ôºö'boolean'„ÄÅ'free_text'„ÄÅ'single_choice'„ÄÅ'multiple_choice'
   */
  answer_type?: AnswerType;
  /**
   * ‰ΩúÊàêËÄÖ„ÅÆ„É¶„Éº„Ç∂„ÉºID„Å´„Çà„Çã„Éï„Ç£„É´„Çø„ÉºÔºàUUIDÂΩ¢ÂºèÔºâ
   */
  creator_id?: UserId;
  /**
   * Èô§Â§ñ„Åô„Çã„ÇØ„Ç§„Ç∫„ÅÆIDÈÖçÂàó„ÄÇÊåáÂÆö„Åï„Çå„ÅüID„ÅÆ„ÇØ„Ç§„Ç∫„ÇíÊ§úÁ¥¢ÁµêÊûú„Åã„ÇâÈô§Â§ñ
   */
  exclude_ids?: QuizId[];
  /**
   * ÊúÄÂ∞èÊ≠£Á≠îÁéá„Éï„Ç£„É´„Çø„ÉºÔºà0.0„Äú1.0Ôºâ„ÄÇ‰æãÔºö0.8„ÅßÊ≠£Á≠îÁéá80%‰ª•‰∏ä„ÅÆ„ÇØ„Ç§„Ç∫„ÅÆ„Åø
   */
  min_correct_rate?: number;
  /**
   * ÊúÄÂ§ßÊ≠£Á≠îÁéá„Éï„Ç£„É´„Çø„ÉºÔºà0.0„Äú1.0Ôºâ„ÄÇ‰æãÔºö0.5„ÅßÊ≠£Á≠îÁéá50%‰ª•‰∏ã„ÅÆ„ÇØ„Ç§„Ç∫„ÅÆ„Åø
   */
  max_correct_rate?: number;
  /**
   * ÊåáÂÆöÊó•ÊôÇ‰ª•Èôç„Å´‰ΩúÊàê„Åï„Çå„Åü„ÇØ„Ç§„Ç∫„Çí„Éï„Ç£„É´„Çø„ÉºÔºàISO 8601ÂΩ¢ÂºèÔºâ„ÄÇ‰æãÔºö'2024-01-01T00:00:00Z'
   */
  created_after?: string;
  /**
   * ÊåáÂÆöÊó•ÊôÇ‰ª•Ââç„Å´‰ΩúÊàê„Åï„Çå„Åü„ÇØ„Ç§„Ç∫„Çí„Éï„Ç£„É´„Çø„ÉºÔºàISO 8601ÂΩ¢ÂºèÔºâ„ÄÇ‰æãÔºö'2024-12-31T23:59:59Z'
   */
  created_before?: string;
  /**
 * ÊñπÂêë„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„Çπ‰ªò„Åç„ÇΩ„Éº„ÉàÈ†ÖÁõÆÔºö
- Âà©Áî®ÂèØËÉΩÈ†ÖÁõÆÔºö'relevance'„ÄÅ'created_date'„ÄÅ'popularity'„ÄÅ'difficulty'
- ÊòáÈ†ÜÔºö`sort=created_date`Ôºà„Éá„Éï„Ç©„É´„ÉàÔºâ
- ÈôçÈ†ÜÔºö`sort=-created_date`Ôºà„Éû„Ç§„Éä„ÇπË®òÂè∑„Çí„Éó„É¨„Éï„Ç£„ÉÉ„ÇØ„ÇπÔºâ
- „Éá„Éï„Ç©„É´„ÉàÔºö„Ç≠„Éº„ÉØ„Éº„ÉâÊ§úÁ¥¢ÊôÇ„ÅØ'relevance'„ÄÅ„Åù„Çå‰ª•Â§ñ„ÅØ'created_date'
 */
  sort?: string;
};
