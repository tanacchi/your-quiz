/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * (title)
 * スマートフォン向けクイズアプリケーションのAPI

このAPIは、教育・学習支援を目的としたクイズアプリケーションのための包括的なサービスを提供します。

## 主要機能
- **クイズ管理**: 作成、更新、削除、承認ワークフロー
- **検索・発見**: 高度なフィルタリングとソート機能
- **学習支援**: パーソナライズされた学習体験
- **タグシステム**: 階層的なコンテンツ分類

## 技術仕様
- **認証**: 全操作でユーザー認証が必要
- **レート制限**: API操作には適切な制限を設定
- **データ形式**: JSON形式でのリクエスト・レスポンス
- **文字エンコーディング**: UTF-8
 * OpenAPI spec version: 0.0.0
 */
import type {
  PaginationRequest,
  QuizListResponse,
  SearchSearchQuizzesParams,
} from "../title.schemas";

/**
 * 高度なフィルタリング、ソート、ページネーション機能を持つクイズ検索API

## 機能
- **全文検索**: 問題文、解説、タグ全体での横断検索
- **高度なフィルタリング**: 難易度、回答タイプ、作成者、日付などによる絞り込み  
- **スマートタグ処理**: 肯定・否定両方のタグフィルター対応
- **柔軟なソート**: 複数ソート項目での昇順・降順指定
- **ページネーション**: 効率的なオフセットベースページング（カスタマイズ可能なページサイズ）

## 特殊構文
- **方向付きソート**: 降順指定は`-`プレフィックス使用（例：`sort=-created_date`で最新順）
- **タグ除外**: 除外指定は`~`プレフィックス使用（例：`tags=~beginner`で初心者レベル除外）  
- **複合タグフィルター**: 肯定・否定タグの組み合わせ可能（例：`tags=javascript&tags=~beginner`）

## 使用例
- 基本検索: `?q=JavaScript`
- 高度なフィルタリング: `?q=配列&tags=javascript&difficulty=intermediate&sort=-created_date`
- カテゴリ除外: `?tags=programming&tags=~tutorial&min_correct_rate=0.8`
- ID除外: `?q=React&exclude_ids=quiz-id-1&exclude_ids=quiz-id-2`（特定のクイズを除外した検索）
 */
export type searchSearchQuizzesResponse200 = {
  data: QuizListResponse;
  status: 200;
};

export type searchSearchQuizzesResponseComposite =
  searchSearchQuizzesResponse200;

export type searchSearchQuizzesResponse =
  searchSearchQuizzesResponseComposite & {
    headers: Headers;
  };

export const getSearchSearchQuizzesUrl = (
  params?: SearchSearchQuizzesParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    const explodeParameters = ["tags", "exclude_ids"];

    if (Array.isArray(value) && explodeParameters.includes(key)) {
      value.forEach((v) =>
        normalizedParams.append(key, v === null ? "null" : v.toString()),
      );
      return;
    }

    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/search/v1/quizzes?${stringifiedParams}`
    : `/api/search/v1/quizzes`;
};

export const searchSearchQuizzes = async (
  paginationRequest: PaginationRequest,
  params?: SearchSearchQuizzesParams,
  options?: RequestInit,
): Promise<searchSearchQuizzesResponse> => {
  const res = await fetch(getSearchSearchQuizzesUrl(params), {
    ...options,
    method: "GET",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(paginationRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: searchSearchQuizzesResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as searchSearchQuizzesResponse;
};
