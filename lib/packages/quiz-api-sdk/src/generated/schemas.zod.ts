/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * (title)
 * OpenAPI spec version: 0.0.0
 */
import { z as zod } from "zod";

/**
 * 新しいクイズ作成API

## 機能
- **多様な問題形式対応**: 真偽値、自由記述、単択、複数選択の4形式をサポート
- **自動バリデーション**: 問題文・解答・選択肢の妥当性を自動検証
- **承認待ち状態**: 作成されたクイズは承認待ち状態で管理者レビューを経て公開
- **タグ分類**: 学習分野・難易度別のタグ付けが可能

## 制限事項
- 問題文は最大500文字
- 解説は最大1000文字
- タグは最大10個まで
- 1日あたりの作成上限：50問（レート制限）

## 作成フロー
1. リクエスト送信
2. バリデーション実行
3. pending_approval状態でデータベースに保存
4. 管理者による承認待ちキューに追加

## 使用例
- 教育コンテンツの作成
- 自習用問題集の構築
- スキルチェック問題の準備
 */
export const quizManagementCreateQuizBodySolutionMatchingStrategyDefault =
  "exact";
export const quizManagementCreateQuizBodySolutionCaseSensitiveDefault = false;
export const quizManagementCreateQuizBodySolutionMinCorrectAnswersDefault = 1;

export const quizManagementCreateQuizBody = zod.object({
  question: zod.string(),
  answerType: zod.enum([
    "boolean",
    "free_text",
    "single_choice",
    "multiple_choice",
  ]),
  solution: zod.union([
    zod.object({
      type: zod.enum(["boolean"]),
      id: zod.string(),
      value: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["free_text"]),
      id: zod.string(),
      correctAnswer: zod.string(),
      matchingStrategy: zod.enum(["exact", "partial", "regex"]),
      caseSensitive: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["single_choice"]),
      id: zod.string(),
      correctChoiceId: zod.string(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
    zod.object({
      type: zod.enum(["multiple_choice"]),
      id: zod.string(),
      correctChoiceIds: zod.array(zod.string()),
      minCorrectAnswers: zod.number(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
  ]),
  explanation: zod.string().optional(),
  tags: zod.array(zod.string()).optional(),
});

export const quizManagementCreateQuizResponseSolutionMatchingStrategyDefault =
  "exact";
export const quizManagementCreateQuizResponseSolutionCaseSensitiveDefault = false;
export const quizManagementCreateQuizResponseSolutionMinCorrectAnswersDefault = 1;

export const quizManagementCreateQuizResponse = zod.object({
  id: zod.string(),
  question: zod.string(),
  answerType: zod.enum([
    "boolean",
    "free_text",
    "single_choice",
    "multiple_choice",
  ]),
  solutionId: zod.string(),
  explanation: zod.string().optional(),
  status: zod.enum(["pending_approval", "approved", "rejected"]),
  creatorId: zod.string(),
  createdAt: zod.string(),
  approvedAt: zod.string().optional(),
  solution: zod.union([
    zod.object({
      type: zod.enum(["boolean"]),
      id: zod.string(),
      value: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["free_text"]),
      id: zod.string(),
      correctAnswer: zod.string(),
      matchingStrategy: zod.enum(["exact", "partial", "regex"]),
      caseSensitive: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["single_choice"]),
      id: zod.string(),
      correctChoiceId: zod.string(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
    zod.object({
      type: zod.enum(["multiple_choice"]),
      id: zod.string(),
      correctChoiceIds: zod.array(zod.string()),
      minCorrectAnswers: zod.number(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
  ]),
  tags: zod.array(zod.string()).optional(),
});

/**
 * クイズ一覧取得API（フィルタ・ページネーション対応）

## 機能
- **多彩なフィルタ**: ステータス・作成者・ID指定による絞り込み
- **効率的ページネーション**: オフセットベースでの分割取得
- **ソート機能**: 作成日時順（最新順）での並び替え
- **権限考慮**: ユーザー権限に応じた表示制御

## フィルタ機能
- **ステータス別**: pending_approval, approved, rejected
- **作成者別**: 特定ユーザーの作成クイズのみ表示
- **ID指定**: 複数のクイズIDを指定して一括取得

## 権限による表示制御
- **一般ユーザー**: 承認済みクイズのみ表示
- **作成者**: 自身の作成したクイズ（全ステータス）も表示
- **管理者**: 全てのクイズ（全ステータス）を表示

## ページネーション
- デフォルト: 20件/ページ
- 最大: 100件/ページ
- オフセットベース: skip/limit パターン

## レスポンス情報
- クイズ一覧（QuizWithSolution形式）
- 総件数（フィルタ適用後）
- 続きの存在フラグ
- 継続トークン（将来のカーソルベース対応用）

## 使用場面
- 管理画面でのクイズ管理
- 作成者マイページでの作品一覧
- 承認待ちキューの表示
 */
export const quizManagementListQuizzesQueryParams = zod.object({
  status: zod
    .enum(["pending_approval", "approved", "rejected"])
    .optional()
    .describe(
      "ステータス別フィルター。指定されない場合は全ステータス（権限に応じて）",
    ),
  creatorId: zod
    .string()
    .optional()
    .describe("作成者ID別フィルター。特定ユーザーの作成クイズのみ取得"),
  ids: zod
    .array(zod.string())
    .optional()
    .describe("クイズID配列による指定取得。複数IDの一括取得に使用"),
});

export const quizManagementListQuizzesBodyLimitDefault = 20;
export const quizManagementListQuizzesBodyOffsetDefault = 0;

export const quizManagementListQuizzesBody = zod.object({
  limit: zod
    .number()
    .default(quizManagementListQuizzesBodyLimitDefault)
    .describe(
      "Maximum number of items to return per page (1-100). Default: 20",
    ),
  offset: zod
    .number()
    .optional()
    .describe(
      "Number of items to skip from the beginning of the result set. Default: 0",
    ),
  continuationToken: zod
    .string()
    .optional()
    .describe(
      "Token for cursor-based pagination (optional, for future implementation)",
    ),
});

export const quizManagementListQuizzesResponseItemsItemSolutionMatchingStrategyDefault =
  "exact";
export const quizManagementListQuizzesResponseItemsItemSolutionCaseSensitiveDefault = false;
export const quizManagementListQuizzesResponseItemsItemSolutionMinCorrectAnswersDefault = 1;

export const quizManagementListQuizzesResponse = zod.object({
  items: zod.array(
    zod.object({
      id: zod.string(),
      question: zod.string(),
      answerType: zod.enum([
        "boolean",
        "free_text",
        "single_choice",
        "multiple_choice",
      ]),
      solutionId: zod.string(),
      explanation: zod.string().optional(),
      status: zod.enum(["pending_approval", "approved", "rejected"]),
      creatorId: zod.string(),
      createdAt: zod.string(),
      approvedAt: zod.string().optional(),
      solution: zod.union([
        zod.object({
          type: zod.enum(["boolean"]),
          id: zod.string(),
          value: zod.boolean(),
        }),
        zod.object({
          type: zod.enum(["free_text"]),
          id: zod.string(),
          correctAnswer: zod.string(),
          matchingStrategy: zod.enum(["exact", "partial", "regex"]),
          caseSensitive: zod.boolean(),
        }),
        zod.object({
          type: zod.enum(["single_choice"]),
          id: zod.string(),
          correctChoiceId: zod.string(),
          choices: zod.array(
            zod.object({
              id: zod.string(),
              solutionId: zod.string(),
              text: zod.string(),
              orderIndex: zod.number(),
            }),
          ),
        }),
        zod.object({
          type: zod.enum(["multiple_choice"]),
          id: zod.string(),
          correctChoiceIds: zod.array(zod.string()),
          minCorrectAnswers: zod.number(),
          choices: zod.array(
            zod.object({
              id: zod.string(),
              solutionId: zod.string(),
              text: zod.string(),
              orderIndex: zod.number(),
            }),
          ),
        }),
      ]),
      tags: zod.array(zod.string()).optional(),
    }),
  ),
  totalCount: zod.number(),
  hasMore: zod.boolean(),
  continuationToken: zod.string().optional(),
});

/**
 * クイズ詳細情報取得API

## 機能
- **完全な問題情報**: 問題文、解答、解説、タグを含む全データを取得
- **権限制御**: 作成者または管理者のみアクセス可能（承認前クイズの場合）
- **解答情報付き**: QuizWithSolution形式で解答も含めて返却

## アクセス制御
- **公開クイズ（approved）**: 全ユーザーがアクセス可能
- **承認待ちクイズ**: 作成者・管理者のみアクセス可能
- **却下クイズ**: 作成者のみアクセス可能

## レスポンス構造
- 基本クイズ情報（id、問題文、ステータス、作成日時等）
- 解答情報（問題形式に応じた Solution オブジェクト）
- 関連タグ配列
- 承認日時（承認済みの場合）

## 使用場面
- クイズ編集画面での詳細表示
- 管理画面での承認レビュー
- 作成者による内容確認
 */
export const quizManagementGetQuizParams = zod.object({
  id: zod.string().describe("取得対象のクイズID（UUID形式）"),
});

export const quizManagementGetQuizResponseSolutionMatchingStrategyDefault =
  "exact";
export const quizManagementGetQuizResponseSolutionCaseSensitiveDefault = false;
export const quizManagementGetQuizResponseSolutionMinCorrectAnswersDefault = 1;

export const quizManagementGetQuizResponse = zod.object({
  id: zod.string(),
  question: zod.string(),
  answerType: zod.enum([
    "boolean",
    "free_text",
    "single_choice",
    "multiple_choice",
  ]),
  solutionId: zod.string(),
  explanation: zod.string().optional(),
  status: zod.enum(["pending_approval", "approved", "rejected"]),
  creatorId: zod.string(),
  createdAt: zod.string(),
  approvedAt: zod.string().optional(),
  solution: zod.union([
    zod.object({
      type: zod.enum(["boolean"]),
      id: zod.string(),
      value: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["free_text"]),
      id: zod.string(),
      correctAnswer: zod.string(),
      matchingStrategy: zod.enum(["exact", "partial", "regex"]),
      caseSensitive: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["single_choice"]),
      id: zod.string(),
      correctChoiceId: zod.string(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
    zod.object({
      type: zod.enum(["multiple_choice"]),
      id: zod.string(),
      correctChoiceIds: zod.array(zod.string()),
      minCorrectAnswers: zod.number(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
  ]),
  tags: zod.array(zod.string()).optional(),
});

/**
 * クイズ情報更新API

## 機能
- **部分更新対応**: 指定されたフィールドのみを更新
- **権限制御**: 作成者のみ更新可能
- **承認状態制限**: 承認済みクイズは更新不可
- **バリデーション**: 更新内容の妥当性を自動検証

## 更新可能フィールド
- 問題文（question）
- 解説（explanation）
- タグ（tags）

## 更新制限
- **承認済みクイズ**: 更新不可（approved状態）
- **他者作成クイズ**: 更新不可（作成者以外）
- **解答部分**: 作成後は変更不可（整合性保持のため）

## 更新後の動作
- 更新されたクイズは承認待ち状態を維持
- 管理者に再レビュー通知
- 更新履歴の記録

## 使用場面
- 誤字脱字の修正
- 解説の充実化
- タグ分類の見直し
 */
export const quizManagementUpdateQuizParams = zod.object({
  id: zod.string().describe("更新対象のクイズID（UUID形式）"),
});

export const quizManagementUpdateQuizBody = zod.object({
  question: zod.string().optional(),
  explanation: zod.string().optional(),
  tags: zod.array(zod.string()).optional(),
});

export const quizManagementUpdateQuizResponseSolutionMatchingStrategyDefault =
  "exact";
export const quizManagementUpdateQuizResponseSolutionCaseSensitiveDefault = false;
export const quizManagementUpdateQuizResponseSolutionMinCorrectAnswersDefault = 1;

export const quizManagementUpdateQuizResponse = zod.object({
  id: zod.string(),
  question: zod.string(),
  answerType: zod.enum([
    "boolean",
    "free_text",
    "single_choice",
    "multiple_choice",
  ]),
  solutionId: zod.string(),
  explanation: zod.string().optional(),
  status: zod.enum(["pending_approval", "approved", "rejected"]),
  creatorId: zod.string(),
  createdAt: zod.string(),
  approvedAt: zod.string().optional(),
  solution: zod.union([
    zod.object({
      type: zod.enum(["boolean"]),
      id: zod.string(),
      value: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["free_text"]),
      id: zod.string(),
      correctAnswer: zod.string(),
      matchingStrategy: zod.enum(["exact", "partial", "regex"]),
      caseSensitive: zod.boolean(),
    }),
    zod.object({
      type: zod.enum(["single_choice"]),
      id: zod.string(),
      correctChoiceId: zod.string(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
    zod.object({
      type: zod.enum(["multiple_choice"]),
      id: zod.string(),
      correctChoiceIds: zod.array(zod.string()),
      minCorrectAnswers: zod.number(),
      choices: zod.array(
        zod.object({
          id: zod.string(),
          solutionId: zod.string(),
          text: zod.string(),
          orderIndex: zod.number(),
        }),
      ),
    }),
  ]),
  tags: zod.array(zod.string()).optional(),
});

/**
 * クイズ削除API

## 機能
- **論理削除**: データは保持し、ステータスを削除済みに変更
- **権限制御**: 作成者または管理者のみ削除可能
- **関連データ保護**: 回答履歴や統計データは保持

## 削除条件
- **作成者権限**: 自身が作成したクイズの削除
- **管理者権限**: 全てのクイズの削除（規約違反等）
- **承認状態**: 全ステータスのクイズが削除対象

## 削除の影響
- **学習セッション**: 進行中セッションは継続可能
- **統計データ**: 過去の回答履歴は保持
- **デッキ**: 含まれるデッキからは自動除外

## 削除後の状態
- データベースからは物理削除されない
- 検索結果には表示されない
- 作成者統計からは除外される

## 使用場面
- 不適切コンテンツの除去
- 作成者による自主削除
- 重複問題の整理
 */
export const quizManagementDeleteQuizParams = zod.object({
  id: zod.string().describe("削除対象のクイズID（UUID形式）"),
});

/**
 * 高度なフィルタリング、ソート、ページネーション機能を持つクイズ検索API

## 機能
- **全文検索**: 問題文、解説、タグ全体での横断検索
- **高度なフィルタリング**: 難易度、回答タイプ、作成者、日付などによる絞り込み  
- **スマートタグ処理**: 肯定・否定両方のタグフィルター対応
- **柔軟なソート**: 複数ソート項目での昇順・降順指定
- **ページネーション**: 効率的なオフセットベースページング（カスタマイズ可能なページサイズ）

## 特殊構文
- **方向付きソート**: 降順指定は`-`プレフィックス使用（例：`sort=-created_date`で最新順）
- **タグ除外**: 除外指定は`~`プレフィックス使用（例：`tags=~beginner`で初心者レベル除外）  
- **複合タグフィルター**: 肯定・否定タグの組み合わせ可能（例：`tags=javascript&tags=~beginner`）

## 使用例
- 基本検索: `?q=JavaScript`
- 高度なフィルタリング: `?q=配列&tags=javascript&difficulty=intermediate&sort=-created_date`
- カテゴリ除外: `?tags=programming&tags=~tutorial&min_correct_rate=0.8`
- ID除外: `?q=React&exclude_ids=quiz-id-1&exclude_ids=quiz-id-2`（特定のクイズを除外した検索）
 */
export const searchSearchQuizzesQueryParams = zod.object({
  q: zod
    .string()
    .optional()
    .describe("問題文、解説、関連タグ全体での全文検索クエリ"),
  tags: zod
    .array(zod.string())
    .optional()
    .describe(
      "クイズ分類用タグフィルター。包含・除外両方の指定が可能：\n- 包含タグ: `tags=javascript` または `tags=javascript&tags=react`\n- 除外タグ: `tags=~beginner` (初心者レベルコンテンツを除外)\n- 混合フィルター: `tags=javascript&tags=~tutorial` (JavaScriptを含み、チュートリアルを除外)",
    ),
  difficulty: zod
    .string()
    .optional()
    .describe(
      "難易度レベルによるフィルター。一般的な値：'beginner'、'intermediate'、'advanced'",
    ),
  answer_type: zod
    .enum(["boolean", "free_text", "single_choice", "multiple_choice"])
    .optional()
    .describe(
      "回答タイプによるフィルター。有効な値：'boolean'、'free_text'、'single_choice'、'multiple_choice'",
    ),
  creator_id: zod
    .string()
    .optional()
    .describe("作成者のユーザーIDによるフィルター（UUID形式）"),
  exclude_ids: zod
    .array(zod.string())
    .optional()
    .describe("除外するクイズのID配列。指定されたIDのクイズを検索結果から除外"),
  min_correct_rate: zod
    .number()
    .optional()
    .describe(
      "最小正答率フィルター（0.0〜1.0）。例：0.8で正答率80%以上のクイズのみ",
    ),
  max_correct_rate: zod
    .number()
    .optional()
    .describe(
      "最大正答率フィルター（0.0〜1.0）。例：0.5で正答率50%以下のクイズのみ",
    ),
  created_after: zod
    .string()
    .optional()
    .describe(
      "指定日時以降に作成されたクイズをフィルター（ISO 8601形式）。例：'2024-01-01T00:00:00Z'",
    ),
  created_before: zod
    .string()
    .optional()
    .describe(
      "指定日時以前に作成されたクイズをフィルター（ISO 8601形式）。例：'2024-12-31T23:59:59Z'",
    ),
  sort: zod
    .string()
    .optional()
    .describe(
      "方向プレフィックス付きソート項目：\n- 利用可能項目：'relevance'、'created_date'、'popularity'、'difficulty'\n- 昇順：`sort=created_date`（デフォルト）\n- 降順：`sort=-created_date`（マイナス記号をプレフィックス）\n- デフォルト：キーワード検索時は'relevance'、それ以外は'created_date'",
    ),
});

export const searchSearchQuizzesBodyLimitDefault = 20;
export const searchSearchQuizzesBodyOffsetDefault = 0;

export const searchSearchQuizzesBody = zod.object({
  limit: zod
    .number()
    .default(searchSearchQuizzesBodyLimitDefault)
    .describe(
      "Maximum number of items to return per page (1-100). Default: 20",
    ),
  offset: zod
    .number()
    .optional()
    .describe(
      "Number of items to skip from the beginning of the result set. Default: 0",
    ),
  continuationToken: zod
    .string()
    .optional()
    .describe(
      "Token for cursor-based pagination (optional, for future implementation)",
    ),
});

export const searchSearchQuizzesResponseItemsItemSolutionMatchingStrategyDefault =
  "exact";
export const searchSearchQuizzesResponseItemsItemSolutionCaseSensitiveDefault = false;
export const searchSearchQuizzesResponseItemsItemSolutionMinCorrectAnswersDefault = 1;

export const searchSearchQuizzesResponse = zod.object({
  items: zod.array(
    zod.object({
      id: zod.string(),
      question: zod.string(),
      answerType: zod.enum([
        "boolean",
        "free_text",
        "single_choice",
        "multiple_choice",
      ]),
      solutionId: zod.string(),
      explanation: zod.string().optional(),
      status: zod.enum(["pending_approval", "approved", "rejected"]),
      creatorId: zod.string(),
      createdAt: zod.string(),
      approvedAt: zod.string().optional(),
      solution: zod.union([
        zod.object({
          type: zod.enum(["boolean"]),
          id: zod.string(),
          value: zod.boolean(),
        }),
        zod.object({
          type: zod.enum(["free_text"]),
          id: zod.string(),
          correctAnswer: zod.string(),
          matchingStrategy: zod.enum(["exact", "partial", "regex"]),
          caseSensitive: zod.boolean(),
        }),
        zod.object({
          type: zod.enum(["single_choice"]),
          id: zod.string(),
          correctChoiceId: zod.string(),
          choices: zod.array(
            zod.object({
              id: zod.string(),
              solutionId: zod.string(),
              text: zod.string(),
              orderIndex: zod.number(),
            }),
          ),
        }),
        zod.object({
          type: zod.enum(["multiple_choice"]),
          id: zod.string(),
          correctChoiceIds: zod.array(zod.string()),
          minCorrectAnswers: zod.number(),
          choices: zod.array(
            zod.object({
              id: zod.string(),
              solutionId: zod.string(),
              text: zod.string(),
              orderIndex: zod.number(),
            }),
          ),
        }),
      ]),
      tags: zod.array(zod.string()).optional(),
    }),
  ),
  totalCount: zod.number(),
  hasMore: zod.boolean(),
  continuationToken: zod.string().optional(),
});
