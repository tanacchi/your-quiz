{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"1","range":{"end":{"column":4,"line":25},"start":{"column":61,"line":18}},"original_slice":"{\n    if (error instanceof SyntaxError) {\n      return createJsonParseError(error);\n    }\n    return createJsonParseError(\n      error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n    );\n  }","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #1\n@@ -14,16 +14,9 @@\n  */\n export const parseJsonSafe = (request: {\n   json(): Promise<unknown>;\n }): ResultAsync<unknown, JsonParseError> => {\n-  return ResultAsync.fromPromise(request.json(), (error) => {\n-    if (error instanceof SyntaxError) {\n-      return createJsonParseError(error);\n-    }\n-    return createJsonParseError(\n-      error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n-    );\n-  });\n+  return ResultAsync.fromPromise(request.json(), (error) => {});\n };\n \n /**\n  * Zodスキーマによるバリデーション（ValidationError版）\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"0","range":{"end":{"column":2,"line":26},"start":{"column":45,"line":17}},"original_slice":"{\n  return ResultAsync.fromPromise(request.json(), (error) => {\n    if (error instanceof SyntaxError) {\n      return createJsonParseError(error);\n    }\n    return createJsonParseError(\n      error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n    );\n  });\n}","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #0\n@@ -13,18 +13,9 @@\n  * @returns ResultAsync<unknown, JsonParseError> - パース結果またはエラー\n  */\n export const parseJsonSafe = (request: {\n   json(): Promise<unknown>;\n-}): ResultAsync<unknown, JsonParseError> => {\n-  return ResultAsync.fromPromise(request.json(), (error) => {\n-    if (error instanceof SyntaxError) {\n-      return createJsonParseError(error);\n-    }\n-    return createJsonParseError(\n-      error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n-    );\n-  });\n-};\n+}): ResultAsync<unknown, JsonParseError> => {};\n \n /**\n  * Zodスキーマによるバリデーション（ValidationError版）\n  * @param schema - Zodスキーマ\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"2","range":{"end":{"column":37,"line":19},"start":{"column":9,"line":19}},"original_slice":"error instanceof SyntaxError","replacement":"true","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #2\n@@ -15,9 +15,9 @@\n export const parseJsonSafe = (request: {\n   json(): Promise<unknown>;\n }): ResultAsync<unknown, JsonParseError> => {\n   return ResultAsync.fromPromise(request.json(), (error) => {\n-    if (error instanceof SyntaxError) {\n+    if (true) {\n       return createJsonParseError(error);\n     }\n     return createJsonParseError(\n       error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"3","range":{"end":{"column":37,"line":19},"start":{"column":9,"line":19}},"original_slice":"error instanceof SyntaxError","replacement":"false","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #3\n@@ -15,9 +15,9 @@\n export const parseJsonSafe = (request: {\n   json(): Promise<unknown>;\n }): ResultAsync<unknown, JsonParseError> => {\n   return ResultAsync.fromPromise(request.json(), (error) => {\n-    if (error instanceof SyntaxError) {\n+    if (false) {\n       return createJsonParseError(error);\n     }\n     return createJsonParseError(\n       error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"4","range":{"end":{"column":6,"line":21},"start":{"column":39,"line":19}},"original_slice":"{\n      return createJsonParseError(error);\n    }","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #4\n@@ -15,11 +15,9 @@\n export const parseJsonSafe = (request: {\n   json(): Promise<unknown>;\n }): ResultAsync<unknown, JsonParseError> => {\n   return ResultAsync.fromPromise(request.json(), (error) => {\n-    if (error instanceof SyntaxError) {\n-      return createJsonParseError(error);\n-    }\n+    if (error instanceof SyntaxError) {}\n     return createJsonParseError(\n       error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n     );\n   });\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"StringLiteral","mutant_id":"5","range":{"end":{"column":73,"line":23},"start":{"column":50,"line":23}},"original_slice":"\"Unknown parsing error\"","replacement":"\"\"","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #5\n@@ -19,9 +19,9 @@\n     if (error instanceof SyntaxError) {\n       return createJsonParseError(error);\n     }\n     return createJsonParseError(\n-      error instanceof Error ? error : new Error(\"Unknown parsing error\"),\n+      error instanceof Error ? error : new Error(\"\"),\n     );\n   });\n };\n \n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"StringLiteral\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"6","range":{"end":{"column":2,"line":72},"start":{"column":35,"line":59}},"original_slice":"{\n  const result = schema.safeParse(data);\n  if (result.success) {\n    return ok(result.data);\n  }\n\n  // errMapperが提供されていない場合（ValidationError版）\n  if (errMapper === undefined) {\n    return err(ValidationErrorFactory.fromZodError(result.error));\n  }\n\n  // カスタムerrMapper版\n  return err(errMapper(result.error));\n}","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #6\n@@ -55,23 +55,10 @@\n export function validateWithZod<T, E = ValidationError>(\n   schema: z.ZodSchema<T>,\n   data: unknown,\n   errMapper?: (e: z.ZodError<T>) => E,\n-): Result<T, E | ValidationError> {\n-  const result = schema.safeParse(data);\n-  if (result.success) {\n-    return ok(result.data);\n-  }\n+): Result<T, E | ValidationError> {}\n \n-  // errMapperが提供されていない場合（ValidationError版）\n-  if (errMapper === undefined) {\n-    return err(ValidationErrorFactory.fromZodError(result.error));\n-  }\n-\n-  // カスタムerrMapper版\n-  return err(errMapper(result.error));\n-}\n-\n /**\n  * エラーをアプリケーション層の適切なエラー型に変換\n  * @param error - 変換対象のエラー\n  * @param context - エラーコンテキスト（ログ用）\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"7","range":{"end":{"column":21,"line":61},"start":{"column":7,"line":61}},"original_slice":"result.success","replacement":"true","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #7\n@@ -57,9 +57,9 @@\n   data: unknown,\n   errMapper?: (e: z.ZodError<T>) => E,\n ): Result<T, E | ValidationError> {\n   const result = schema.safeParse(data);\n-  if (result.success) {\n+  if (true) {\n     return ok(result.data);\n   }\n \n   // errMapperが提供されていない場合（ValidationError版）\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"8","range":{"end":{"column":21,"line":61},"start":{"column":7,"line":61}},"original_slice":"result.success","replacement":"false","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #8\n@@ -57,9 +57,9 @@\n   data: unknown,\n   errMapper?: (e: z.ZodError<T>) => E,\n ): Result<T, E | ValidationError> {\n   const result = schema.safeParse(data);\n-  if (result.success) {\n+  if (false) {\n     return ok(result.data);\n   }\n \n   // errMapperが提供されていない場合（ValidationError版）\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"9","range":{"end":{"column":4,"line":63},"start":{"column":23,"line":61}},"original_slice":"{\n    return ok(result.data);\n  }","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #9\n@@ -57,11 +57,9 @@\n   data: unknown,\n   errMapper?: (e: z.ZodError<T>) => E,\n ): Result<T, E | ValidationError> {\n   const result = schema.safeParse(data);\n-  if (result.success) {\n-    return ok(result.data);\n-  }\n+  if (result.success) {}\n \n   // errMapperが提供されていない場合（ValidationError版）\n   if (errMapper === undefined) {\n     return err(ValidationErrorFactory.fromZodError(result.error));\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"10","range":{"end":{"column":30,"line":66},"start":{"column":7,"line":66}},"original_slice":"errMapper === undefined","replacement":"true","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #10\n@@ -62,9 +62,9 @@\n     return ok(result.data);\n   }\n \n   // errMapperが提供されていない場合（ValidationError版）\n-  if (errMapper === undefined) {\n+  if (true) {\n     return err(ValidationErrorFactory.fromZodError(result.error));\n   }\n \n   // カスタムerrMapper版\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"11","range":{"end":{"column":30,"line":66},"start":{"column":7,"line":66}},"original_slice":"errMapper === undefined","replacement":"false","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #11\n@@ -62,9 +62,9 @@\n     return ok(result.data);\n   }\n \n   // errMapperが提供されていない場合（ValidationError版）\n-  if (errMapper === undefined) {\n+  if (false) {\n     return err(ValidationErrorFactory.fromZodError(result.error));\n   }\n \n   // カスタムerrMapper版\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"EqualityOperator","mutant_id":"12","range":{"end":{"column":30,"line":66},"start":{"column":7,"line":66}},"original_slice":"errMapper === undefined","replacement":"errMapper !== undefined","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #12\n@@ -62,9 +62,9 @@\n     return ok(result.data);\n   }\n \n   // errMapperが提供されていない場合（ValidationError版）\n-  if (errMapper === undefined) {\n+  if (errMapper !== undefined) {\n     return err(ValidationErrorFactory.fromZodError(result.error));\n   }\n \n   // カスタムerrMapper版\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"等価演算子が置換されています（==/=== ⇄ !=/!==）。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"13","range":{"end":{"column":4,"line":68},"start":{"column":32,"line":66}},"original_slice":"{\n    return err(ValidationErrorFactory.fromZodError(result.error));\n  }","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #13\n@@ -62,11 +62,9 @@\n     return ok(result.data);\n   }\n \n   // errMapperが提供されていない場合（ValidationError版）\n-  if (errMapper === undefined) {\n-    return err(ValidationErrorFactory.fromZodError(result.error));\n-  }\n+  if (errMapper === undefined) {}\n \n   // カスタムerrMapper版\n   return err(errMapper(result.error));\n }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"StringLiteral","mutant_id":"14","range":{"end":{"column":39,"line":82},"start":{"column":21,"line":82}},"original_slice":"\"Operation failed\"","replacement":"\"\"","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #14\n@@ -78,9 +78,9 @@\n  * @returns ValidationError または InternalServerError\n  */\n export const fromZodErrorToAppError = (\n   error: unknown,\n-  context: string = \"Operation failed\",\n+  context: string = \"\",\n ): ValidationError | InternalServerError => {\n   // ZodErrorの場合はValidationErrorに変換\n   if (error instanceof ZodError) {\n     return ValidationErrorFactory.fromZodError(error);\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"StringLiteral\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"15","range":{"end":{"column":2,"line":94},"start":{"column":45,"line":83}},"original_slice":"{\n  // ZodErrorの場合はValidationErrorに変換\n  if (error instanceof ZodError) {\n    return ValidationErrorFactory.fromZodError(error);\n  }\n\n  // その他はInternalServerErrorとして扱う\n  return new InternalServerError(\n    context,\n    error instanceof Error ? error.message : String(error),\n  );\n}","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #15\n@@ -79,16 +79,5 @@\n  */\n export const fromZodErrorToAppError = (\n   error: unknown,\n   context: string = \"Operation failed\",\n-): ValidationError | InternalServerError => {\n-  // ZodErrorの場合はValidationErrorに変換\n-  if (error instanceof ZodError) {\n-    return ValidationErrorFactory.fromZodError(error);\n-  }\n-\n-  // その他はInternalServerErrorとして扱う\n-  return new InternalServerError(\n-    context,\n-    error instanceof Error ? error.message : String(error),\n-  );\n-};\n+): ValidationError | InternalServerError => {};\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"16","range":{"end":{"column":32,"line":85},"start":{"column":7,"line":85}},"original_slice":"error instanceof ZodError","replacement":"true","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #16\n@@ -81,9 +81,9 @@\n   error: unknown,\n   context: string = \"Operation failed\",\n ): ValidationError | InternalServerError => {\n   // ZodErrorの場合はValidationErrorに変換\n-  if (error instanceof ZodError) {\n+  if (true) {\n     return ValidationErrorFactory.fromZodError(error);\n   }\n \n   // その他はInternalServerErrorとして扱う\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"ConditionalExpression","mutant_id":"17","range":{"end":{"column":32,"line":85},"start":{"column":7,"line":85}},"original_slice":"error instanceof ZodError","replacement":"false","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #17\n@@ -81,9 +81,9 @@\n   error: unknown,\n   context: string = \"Operation failed\",\n ): ValidationError | InternalServerError => {\n   // ZodErrorの場合はValidationErrorに変換\n-  if (error instanceof ZodError) {\n+  if (false) {\n     return ValidationErrorFactory.fromZodError(error);\n   }\n \n   // その他はInternalServerErrorとして扱う\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/utils/validation.ts","mutator":"BlockStatement","mutant_id":"18","range":{"end":{"column":4,"line":87},"start":{"column":34,"line":85}},"original_slice":"{\n    return ValidationErrorFactory.fromZodError(error);\n  }","replacement":"{}","unified_diff":"Index: src/shared/utils/validation.ts\n===================================================================\n--- src/shared/utils/validation.ts\toriginal\n+++ src/shared/utils/validation.ts\tmutated #18\n@@ -81,11 +81,9 @@\n   error: unknown,\n   context: string = \"Operation failed\",\n ): ValidationError | InternalServerError => {\n   // ZodErrorの場合はValidationErrorに変換\n-  if (error instanceof ZodError) {\n-    return ValidationErrorFactory.fromZodError(error);\n-  }\n+  if (error instanceof ZodError) {}\n \n   // その他はInternalServerErrorとして扱う\n   return new InternalServerError(\n     context,\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
