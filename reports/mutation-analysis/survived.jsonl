{"file":"src/shared/errors/factories.ts","mutator":"ObjectLiteral","mutant_id":"66","stable_id":"713fe950","range":{"end":{"column":2,"line":68},"start":{"column":39,"line":65}},"original_slice":"{\n  fromZodError: (zodError: ZodError, requestId?: string) =>\n    createValidationError(zodError, requestId),\n}","replacement":"{}","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #66\n@@ -61,12 +61,9 @@\n     requestId,\n   );\n };\n \n-export const ValidationErrorFactory = {\n-  fromZodError: (zodError: ZodError, requestId?: string) =>\n-    createValidationError(zodError, requestId),\n-};\n+export const ValidationErrorFactory = {};\n \n /**\n  * 単一フィールドのバリデーションエラーを作成\n  */\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ObjectLiteral\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ArrowFunction","mutant_id":"67","stable_id":"bb033de8","range":{"end":{"column":47,"line":67},"start":{"column":17,"line":66}},"original_slice":"(zodError: ZodError, requestId?: string) =>\n    createValidationError(zodError, requestId)","replacement":"() => undefined","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #67\n@@ -62,10 +62,9 @@\n   );\n };\n \n export const ValidationErrorFactory = {\n-  fromZodError: (zodError: ZodError, requestId?: string) =>\n-    createValidationError(zodError, requestId),\n+  fromZodError: () => undefined,\n };\n \n /**\n  * 単一フィールドのバリデーションエラーを作成\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ObjectLiteral","mutant_id":"80","stable_id":"4b00b4a1","range":{"end":{"column":2,"line":158},"start":{"column":39,"line":143}},"original_slice":"{\n  createFailed: (entity: string, cause?: Error, requestId?: string) =>\n    new CreateFailedError(entity, cause?.message, requestId),\n\n  findFailed: (entity: string, cause?: Error, requestId?: string) =>\n    new FindFailedError(entity, cause?.message, requestId),\n\n  updateFailed: (entity: string, cause?: Error, requestId?: string) =>\n    new UpdateFailedError(entity, cause?.message, requestId),\n\n  deleteFailed: (entity: string, cause?: Error, requestId?: string) =>\n    new DeleteFailedError(entity, cause?.message, requestId),\n\n  notImplemented: (operation: string, requestId?: string) =>\n    new NotImplementedError(operation, requestId),\n}","replacement":"{}","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #80\n@@ -139,25 +139,10 @@\n \n /**\n  * リポジトリエラーファクトリー\n  */\n-export const RepositoryErrorFactory = {\n-  createFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new CreateFailedError(entity, cause?.message, requestId),\n+export const RepositoryErrorFactory = {};\n \n-  findFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new FindFailedError(entity, cause?.message, requestId),\n-\n-  updateFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new UpdateFailedError(entity, cause?.message, requestId),\n-\n-  deleteFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new DeleteFailedError(entity, cause?.message, requestId),\n-\n-  notImplemented: (operation: string, requestId?: string) =>\n-    new NotImplementedError(operation, requestId),\n-};\n-\n /**\n  * JSON解析エラーを作成\n  */\n export const createJsonParseError = (\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ObjectLiteral\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ArrowFunction","mutant_id":"81","stable_id":"0b1a7090","range":{"end":{"column":61,"line":145},"start":{"column":17,"line":144}},"original_slice":"(entity: string, cause?: Error, requestId?: string) =>\n    new CreateFailedError(entity, cause?.message, requestId)","replacement":"() => undefined","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #81\n@@ -140,10 +140,9 @@\n /**\n  * リポジトリエラーファクトリー\n  */\n export const RepositoryErrorFactory = {\n-  createFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new CreateFailedError(entity, cause?.message, requestId),\n+  createFailed: () => undefined,\n \n   findFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new FindFailedError(entity, cause?.message, requestId),\n \n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ArrowFunction","mutant_id":"83","stable_id":"19717a33","range":{"end":{"column":59,"line":148},"start":{"column":15,"line":147}},"original_slice":"(entity: string, cause?: Error, requestId?: string) =>\n    new FindFailedError(entity, cause?.message, requestId)","replacement":"() => undefined","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #83\n@@ -143,10 +143,9 @@\n export const RepositoryErrorFactory = {\n   createFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new CreateFailedError(entity, cause?.message, requestId),\n \n-  findFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new FindFailedError(entity, cause?.message, requestId),\n+  findFailed: () => undefined,\n \n   updateFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new UpdateFailedError(entity, cause?.message, requestId),\n \n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ArrowFunction","mutant_id":"85","stable_id":"4842aaff","range":{"end":{"column":61,"line":151},"start":{"column":17,"line":150}},"original_slice":"(entity: string, cause?: Error, requestId?: string) =>\n    new UpdateFailedError(entity, cause?.message, requestId)","replacement":"() => undefined","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #85\n@@ -146,10 +146,9 @@\n \n   findFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new FindFailedError(entity, cause?.message, requestId),\n \n-  updateFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new UpdateFailedError(entity, cause?.message, requestId),\n+  updateFailed: () => undefined,\n \n   deleteFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new DeleteFailedError(entity, cause?.message, requestId),\n \n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ArrowFunction","mutant_id":"87","stable_id":"d7b4ac1d","range":{"end":{"column":61,"line":154},"start":{"column":17,"line":153}},"original_slice":"(entity: string, cause?: Error, requestId?: string) =>\n    new DeleteFailedError(entity, cause?.message, requestId)","replacement":"() => undefined","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #87\n@@ -149,10 +149,9 @@\n \n   updateFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new UpdateFailedError(entity, cause?.message, requestId),\n \n-  deleteFailed: (entity: string, cause?: Error, requestId?: string) =>\n-    new DeleteFailedError(entity, cause?.message, requestId),\n+  deleteFailed: () => undefined,\n \n   notImplemented: (operation: string, requestId?: string) =>\n     new NotImplementedError(operation, requestId),\n };\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/errors/factories.ts","mutator":"ArrowFunction","mutant_id":"89","stable_id":"8a84b025","range":{"end":{"column":50,"line":157},"start":{"column":19,"line":156}},"original_slice":"(operation: string, requestId?: string) =>\n    new NotImplementedError(operation, requestId)","replacement":"() => undefined","unified_diff":"Index: src/shared/errors/factories.ts\n===================================================================\n--- src/shared/errors/factories.ts\toriginal\n+++ src/shared/errors/factories.ts\tmutated #89\n@@ -152,10 +152,9 @@\n \n   deleteFailed: (entity: string, cause?: Error, requestId?: string) =>\n     new DeleteFailedError(entity, cause?.message, requestId),\n \n-  notImplemented: (operation: string, requestId?: string) =>\n-    new NotImplementedError(operation, requestId),\n+  notImplemented: () => undefined,\n };\n \n /**\n  * JSON解析エラーを作成\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/fixtures/loaders/quiz-fixture-loader.ts","mutator":"ConditionalExpression","mutant_id":"108","stable_id":"132afe59","range":{"end":{"column":25,"line":22},"start":{"column":7,"line":22}},"original_slice":"quizCache !== null","replacement":"false","unified_diff":"Index: src/shared/fixtures/loaders/quiz-fixture-loader.ts\n===================================================================\n--- src/shared/fixtures/loaders/quiz-fixture-loader.ts\toriginal\n+++ src/shared/fixtures/loaders/quiz-fixture-loader.ts\tmutated #108\n@@ -18,9 +18,9 @@\n  * 基本的なクイズフィクスチャーを読み込み\n  * MockQuizRepository用のデータ\n  */\n export function loadQuizFixtures(): QuizSummary[] {\n-  if (quizCache !== null) {\n+  if (false) {\n     return quizCache;\n   }\n \n   try {\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/fixtures/loaders/quiz-fixture-loader.ts","mutator":"BlockStatement","mutant_id":"110","stable_id":"736c9f10","range":{"end":{"column":4,"line":24},"start":{"column":27,"line":22}},"original_slice":"{\n    return quizCache;\n  }","replacement":"{}","unified_diff":"Index: src/shared/fixtures/loaders/quiz-fixture-loader.ts\n===================================================================\n--- src/shared/fixtures/loaders/quiz-fixture-loader.ts\toriginal\n+++ src/shared/fixtures/loaders/quiz-fixture-loader.ts\tmutated #110\n@@ -18,11 +18,9 @@\n  * 基本的なクイズフィクスチャーを読み込み\n  * MockQuizRepository用のデータ\n  */\n export function loadQuizFixtures(): QuizSummary[] {\n-  if (quizCache !== null) {\n-    return quizCache;\n-  }\n+  if (quizCache !== null) {}\n \n   try {\n     // 静的インポートに変更（Node.js依存排除）\n     const jsonData = quizRowsData;\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"BlockStatement\" による置換。"}
{"file":"src/shared/fixtures/loaders/quiz-fixture-loader.ts","mutator":"ConditionalExpression","mutant_id":"115","stable_id":"59c4346b","range":{"end":{"column":26,"line":32},"start":{"column":11,"line":32}},"original_slice":"!isQuizRow(row)","replacement":"false","unified_diff":"Index: src/shared/fixtures/loaders/quiz-fixture-loader.ts\n===================================================================\n--- src/shared/fixtures/loaders/quiz-fixture-loader.ts\toriginal\n+++ src/shared/fixtures/loaders/quiz-fixture-loader.ts\tmutated #115\n@@ -28,9 +28,9 @@\n     const jsonData = quizRowsData;\n \n     // D1と同じ型検証フロー\n     const validatedRows = jsonData.map((row: unknown, index: number) => {\n-      if (!isQuizRow(row)) {\n+      if (false) {\n         throw new Error(\n           `Invalid quiz fixture at index ${index}: ${JSON.stringify(row)}`,\n         );\n       }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/fixtures/loaders/quiz-fixture-loader.ts","mutator":"ConditionalExpression","mutant_id":"119","stable_id":"99e85c74","range":{"end":{"column":23,"line":42},"start":{"column":9,"line":42}},"original_slice":"result.isErr()","replacement":"false","unified_diff":"Index: src/shared/fixtures/loaders/quiz-fixture-loader.ts\n===================================================================\n--- src/shared/fixtures/loaders/quiz-fixture-loader.ts\toriginal\n+++ src/shared/fixtures/loaders/quiz-fixture-loader.ts\tmutated #119\n@@ -38,9 +38,9 @@\n     });\n \n     // D1と同じマッパー使用\n     const result = D1QuizSummaryMapper.fromRows(validatedRows);\n-    if (result.isErr()) {\n+    if (false) {\n       throw new Error(\n         `Quiz fixture validation failed: ${result.error.message}`,\n       );\n     }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/validation/entity/DraftBase.ts","mutator":"MethodExpression","mutant_id":"752","stable_id":"52741bb1","range":{"end":{"column":56,"line":170},"start":{"column":12,"line":169}},"original_slice":"issues\n      .filter((issue) => issue.path.join(\".\") === path)","replacement":"issues","unified_diff":"Index: src/shared/validation/entity/DraftBase.ts\n===================================================================\n--- src/shared/validation/entity/DraftBase.ts\toriginal\n+++ src/shared/validation/entity/DraftBase.ts\tmutated #752\n@@ -166,8 +166,7 @@\n    */\n   getErrors(path: string): string[] {\n     const issues = this.getIssues();\n     return issues\n-      .filter((issue) => issue.path.join(\".\") === path)\n       .map((issue) => issue.message);\n   }\n }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"MethodExpression\" による置換。"}
{"file":"src/shared/validation/entity/DraftBase.ts","mutator":"ConditionalExpression","mutant_id":"754","stable_id":"88bd683a","range":{"end":{"column":55,"line":170},"start":{"column":26,"line":170}},"original_slice":"issue.path.join(\".\") === path","replacement":"true","unified_diff":"Index: src/shared/validation/entity/DraftBase.ts\n===================================================================\n--- src/shared/validation/entity/DraftBase.ts\toriginal\n+++ src/shared/validation/entity/DraftBase.ts\tmutated #754\n@@ -166,8 +166,8 @@\n    */\n   getErrors(path: string): string[] {\n     const issues = this.getIssues();\n     return issues\n-      .filter((issue) => issue.path.join(\".\") === path)\n+      .filter((issue) => true)\n       .map((issue) => issue.message);\n   }\n }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"条件式が変更されています。"}
{"file":"src/shared/validation/entity/DraftBase.ts","mutator":"EqualityOperator","mutant_id":"756","stable_id":"2d01a704","range":{"end":{"column":55,"line":170},"start":{"column":26,"line":170}},"original_slice":"issue.path.join(\".\") === path","replacement":"issue.path.join(\".\") !== path","unified_diff":"Index: src/shared/validation/entity/DraftBase.ts\n===================================================================\n--- src/shared/validation/entity/DraftBase.ts\toriginal\n+++ src/shared/validation/entity/DraftBase.ts\tmutated #756\n@@ -166,8 +166,8 @@\n    */\n   getErrors(path: string): string[] {\n     const issues = this.getIssues();\n     return issues\n-      .filter((issue) => issue.path.join(\".\") === path)\n+      .filter((issue) => issue.path.join(\".\") !== path)\n       .map((issue) => issue.message);\n   }\n }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"等価演算子が置換されています（==/=== ⇄ !=/!==）。"}
{"file":"src/shared/validation/entity/DraftBase.ts","mutator":"StringLiteral","mutant_id":"757","stable_id":"b6c196fe","range":{"end":{"column":45,"line":170},"start":{"column":42,"line":170}},"original_slice":"\".\"","replacement":"\"\"","unified_diff":"Index: src/shared/validation/entity/DraftBase.ts\n===================================================================\n--- src/shared/validation/entity/DraftBase.ts\toriginal\n+++ src/shared/validation/entity/DraftBase.ts\tmutated #757\n@@ -166,8 +166,8 @@\n    */\n   getErrors(path: string): string[] {\n     const issues = this.getIssues();\n     return issues\n-      .filter((issue) => issue.path.join(\".\") === path)\n+      .filter((issue) => issue.path.join(\"\") === path)\n       .map((issue) => issue.message);\n   }\n }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"StringLiteral\" による置換。"}
{"file":"src/shared/validation/entity/DraftBase.ts","mutator":"ArrowFunction","mutant_id":"758","stable_id":"4ebd55f7","range":{"end":{"column":36,"line":171},"start":{"column":12,"line":171}},"original_slice":"(issue) => issue.message","replacement":"() => undefined","unified_diff":"Index: src/shared/validation/entity/DraftBase.ts\n===================================================================\n--- src/shared/validation/entity/DraftBase.ts\toriginal\n+++ src/shared/validation/entity/DraftBase.ts\tmutated #758\n@@ -167,7 +167,7 @@\n   getErrors(path: string): string[] {\n     const issues = this.getIssues();\n     return issues\n       .filter((issue) => issue.path.join(\".\") === path)\n-      .map((issue) => issue.message);\n+      .map(() => undefined);\n   }\n }\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"153","stable_id":"447714ea","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #153\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"154","stable_id":"e1984220","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #154\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"155","stable_id":"170ee700","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #155\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"156","stable_id":"c1e0fed6","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\D{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #156\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\D{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"157","stable_id":"c613e1f1","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #157\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"158","stable_id":"52c33036","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\D{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #158\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\D{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"159","stable_id":"c48b7c4f","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\dT\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #159\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\dT\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"160","stable_id":"0f2c643b","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\D{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #160\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\D{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"161","stable_id":"0da1805f","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #161\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"162","stable_id":"221c209c","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\D{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #162\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\D{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"163","stable_id":"6f37ba1a","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #163\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"164","stable_id":"f5a604fc","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\D{2}:\\d{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #164\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\D{2}:\\d{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"165","stable_id":"817e1bfc","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #165\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"166","stable_id":"dbc840a7","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\D{2}(?:\\.\\d+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #166\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\D{2}(?:\\.\\d+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"167","stable_id":"96900d29","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #167\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"168","stable_id":"1460d49a","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #168\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"169","stable_id":"9da49b64","range":{"end":{"column":67,"line":8},"start":{"column":17,"line":8}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/","replacement":"/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\D+)?Z$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #169\n@@ -4,9 +4,9 @@\n  * ISO8601 datetime format regex\n  * Matches: YYYY-MM-DDTHH:mm:ss.sssZ (with optional milliseconds)\n  * Examples: 2024-01-15T10:30:00Z, 2024-01-15T10:30:00.123Z\n  */\n-const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/;\n+const iso8601 = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\D+)?Z$/;\n \n /**\n  * Schema for validating ISO8601 datetime strings and transforming to Date objects\n  * Use this when you need Date objects for business logic\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"StringLiteral","mutant_id":"170","stable_id":"a8fddfdd","range":{"end":{"column":45,"line":16},"start":{"column":19,"line":16}},"original_slice":"\"Invalid ISO8601 datetime\"","replacement":"\"\"","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #170\n@@ -12,9 +12,9 @@\n  * Use this when you need Date objects for business logic\n  */\n export const dateStringSchema = z\n   .string()\n-  .regex(iso8601, \"Invalid ISO8601 datetime\")\n+  .regex(iso8601, \"\")\n   .transform((s) => new Date(s));\n \n /**\n  * Schema for validating ISO8601 datetime strings without transformation\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"StringLiteral\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"StringLiteral","mutant_id":"172","stable_id":"61da9476","range":{"end":{"column":45,"line":25},"start":{"column":19,"line":25}},"original_slice":"\"Invalid ISO8601 datetime\"","replacement":"\"\"","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #172\n@@ -21,9 +21,9 @@\n  * Use this when you need to keep the string format (e.g., for DTOs, API responses)\n  */\n export const dateStringOnlySchema = z\n   .string()\n-  .regex(iso8601, \"Invalid ISO8601 datetime\");\n+  .regex(iso8601, \"\");\n \n /**\n  * SQLite/D1 datetime format regex\n  * Matches: YYYY-MM-DD HH:MM:SS (space-separated format)\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"StringLiteral\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"ArrowFunction","mutant_id":"171","stable_id":"dda8a22e","range":{"end":{"column":32,"line":17},"start":{"column":14,"line":17}},"original_slice":"(s) => new Date(s)","replacement":"() => undefined","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #171\n@@ -13,9 +13,9 @@\n  */\n export const dateStringSchema = z\n   .string()\n   .regex(iso8601, \"Invalid ISO8601 datetime\")\n-  .transform((s) => new Date(s));\n+  .transform(() => undefined);\n \n /**\n  * Schema for validating ISO8601 datetime strings without transformation\n  * Use this when you need to keep the string format (e.g., for DTOs, API responses)\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"ArrowFunction\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"174","stable_id":"ecca1b24","range":{"end":{"column":63,"line":32},"start":{"column":24,"line":32}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/","replacement":"/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #174\n@@ -28,9 +28,9 @@\n  * SQLite/D1 datetime format regex\n  * Matches: YYYY-MM-DD HH:MM:SS (space-separated format)\n  * Examples: 2025-08-11 08:46:01, 2024-01-15 10:30:00\n  */\n-const sqliteDateTime = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\n+const sqliteDateTime = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}/;\n \n /**\n  * Schema for validating SQLite/D1 datetime strings without transformation\n  * Use this for D1 database datetime fields (CURRENT_TIMESTAMP format)\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
{"file":"src/shared/schemas/datetime.schema.ts","mutator":"Regex","mutant_id":"173","stable_id":"2d378143","range":{"end":{"column":63,"line":32},"start":{"column":24,"line":32}},"original_slice":"/^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/","replacement":"/\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/","unified_diff":"Index: src/shared/schemas/datetime.schema.ts\n===================================================================\n--- src/shared/schemas/datetime.schema.ts\toriginal\n+++ src/shared/schemas/datetime.schema.ts\tmutated #173\n@@ -28,9 +28,9 @@\n  * SQLite/D1 datetime format regex\n  * Matches: YYYY-MM-DD HH:MM:SS (space-separated format)\n  * Examples: 2025-08-11 08:46:01, 2024-01-15 10:30:00\n  */\n-const sqliteDateTime = /^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\n+const sqliteDateTime = /\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$/;\n \n /**\n  * Schema for validating SQLite/D1 datetime strings without transformation\n  * Use this for D1 database datetime fields (CURRENT_TIMESTAMP format)\n","instruction":"このサバイブ・ミューテーションを失敗させる最小テストを設計してください。","hint":"ミューテータ \"Regex\" による置換。"}
