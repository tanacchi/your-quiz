/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/quiz/v1/manage/quizzes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description クイズ一覧取得API（フィルタ・ページネーション対応）
     *
     *     ## 機能
     *     - **多彩なフィルタ**: ステータス・作成者・ID指定による絞り込み
     *     - **効率的ページネーション**: オフセットベースでの分割取得
     *     - **ソート機能**: 作成日時順（最新順）での並び替え
     *     - **権限考慮**: ユーザー権限に応じた表示制御
     *
     *     ## フィルタ機能
     *     - **ステータス別**: pending_approval, approved, rejected（複数指定でOR条件）
     *     - **作成者別**: 特定ユーザーの作成クイズのみ表示（複数指定でOR条件）
     *     - **クイズID指定**: 複数のクイズIDを指定して一括取得
     *
     *     ## 権限による表示制御
     *     - **一般ユーザー**: 承認済みクイズのみ表示
     *     - **作成者**: 自身の作成したクイズ（全ステータス）も表示
     *     - **管理者**: 全てのクイズ（全ステータス）を表示
     *
     *     ## ページネーション
     *     - デフォルト: 20件/ページ
     *     - 最大: 100件/ページ
     *     - オフセットベース: skip/limit パターン
     *
     *     ## レスポンス情報
     *     - クイズ一覧（QuizWithSolution形式）
     *     - 総件数（フィルタ適用後）
     *     - 続きの存在フラグ
     *     - 継続トークン（将来のカーソルベース対応用）
     *
     *     ## クエリパラメータ使用例
     *     - **複数ステータス**: `?status=pending_approval&status=approved` （承認待ち + 承認済み）
     *     - **複数作成者**: `?creatorId=user1&creatorId=user2` （複数ユーザーの作品）
     *     - **クイズID指定**: `?quizId=quiz1&quizId=quiz2` （特定クイズの一括取得）
     *     - **組み合わせ**: `?status=approved&creatorId=user1&creatorId=user2` （複数作成者の承認済みクイズ）
     *
     *     ## 使用場面
     *     - **管理画面でのクイズ管理**: 複数ステータス・作成者での絞り込み
     *     - **作成者マイページでの作品一覧**: 自身の全ステータスクイズ表示
     *     - **承認待ちキューの表示**: pending_approval ステータスのみ表示
     *     - **バッチ処理**: 特定IDのクイズ群を一括取得 */
    get: operations["QuizManagement_listQuizzes"];
    put?: never;
    /** @description 新しいクイズ作成API
     *
     *     ## 機能
     *     - **多様な問題形式対応**: 真偽値、自由記述、単択、複数選択の4形式をサポート
     *     - **自動バリデーション**: 問題文・解答・選択肢の妥当性を自動検証
     *     - **承認待ち状態**: 作成されたクイズは承認待ち状態で管理者レビューを経て公開
     *     - **タグ分類**: 学習分野・難易度別のタグ付けが可能
     *
     *     ## 制限事項
     *     - 問題文は最大500文字
     *     - 解説は最大1000文字
     *     - タグは最大10個まで
     *     - 1日あたりの作成上限：50問（レート制限）
     *
     *     ## 作成フロー
     *     1. リクエスト送信
     *     2. バリデーション実行
     *     3. pending_approval状態でデータベースに保存
     *     4. 管理者による承認待ちキューに追加
     *
     *     ## 使用例
     *     - 教育コンテンツの作成
     *     - 自習用問題集の構築
     *     - スキルチェック問題の準備 */
    post: operations["QuizManagement_createQuiz"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/quiz/v1/manage/quizzes/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description クイズ詳細情報取得API
     *
     *     ## 機能
     *     - **完全な問題情報**: 問題文、解答、解説、タグを含む全データを取得
     *     - **権限制御**: 作成者または管理者のみアクセス可能（承認前クイズの場合）
     *     - **解答情報付き**: QuizWithSolution形式で解答も含めて返却
     *
     *     ## アクセス制御
     *     - **公開クイズ（approved）**: 全ユーザーがアクセス可能
     *     - **承認待ちクイズ**: 作成者・管理者のみアクセス可能
     *     - **却下クイズ**: 作成者のみアクセス可能
     *
     *     ## レスポンス構造
     *     - 基本クイズ情報（id、問題文、ステータス、作成日時等）
     *     - 解答情報（問題形式に応じた Solution オブジェクト）
     *     - 関連タグ配列
     *     - 承認日時（承認済みの場合）
     *
     *     ## 使用場面
     *     - クイズ編集画面での詳細表示
     *     - 管理画面での承認レビュー
     *     - 作成者による内容確認 */
    get: operations["QuizManagement_getQuiz"];
    put?: never;
    post?: never;
    /** @description クイズ削除API
     *
     *     ## 機能
     *     - **論理削除**: データは保持し、ステータスを削除済みに変更
     *     - **権限制御**: 作成者または管理者のみ削除可能
     *     - **関連データ保護**: 回答履歴や統計データは保持
     *
     *     ## 削除条件
     *     - **作成者権限**: 自身が作成したクイズの削除
     *     - **管理者権限**: 全てのクイズの削除（規約違反等）
     *     - **承認状態**: 全ステータスのクイズが削除対象
     *
     *     ## 削除の影響
     *     - **学習セッション**: 進行中セッションは継続可能
     *     - **統計データ**: 過去の回答履歴は保持
     *     - **デッキ**: 含まれるデッキからは自動除外
     *
     *     ## 削除後の状態
     *     - データベースからは物理削除されない
     *     - 検索結果には表示されない
     *     - 作成者統計からは除外される
     *
     *     ## 使用場面
     *     - 不適切コンテンツの除去
     *     - 作成者による自主削除
     *     - 重複問題の整理 */
    delete: operations["QuizManagement_deleteQuiz"];
    options?: never;
    head?: never;
    /** @description クイズ情報部分更新API（PATCH）
     *
     *     ## 機能
     *     - **真の部分更新**: 指定されたフィールドのみを更新（PATCH方式）
     *     - **柔軟な権限制御**: 作成者と管理者で更新可能フィールドが異なる
     *     - **承認状態制限**: 承認済みクイズは更新不可
     *     - **整合性バリデーション**: 更新内容の妥当性を自動検証
     *
     *     ## 更新可能フィールド
     *     - **問題文（question）**: 問題の内容を修正
     *     - **回答形式（answerType）**: boolean/free_text/single_choice/multiple_choice
     *     - **解答内容（solution）**: SolutionCreateを使用してIDなしで解答を更新
     *     - **解説（explanation）**: 問題の説明文を追加・修正
     *     - **タグ（tags）**: 学習分野・難易度別のタグ配列
     *     - **作成者ID（creatorId）**: 管理者のみ、作成者の変更が可能
     *
     *     ## 権限制御
     *     - **作成者権限**: question, answerType, solution, explanation, tags の更新
     *     - **管理者権限**: 全フィールド（creatorId含む）の更新
     *     - **承認済みクイズ**: 全ユーザーで更新不可（approved状態）
     *
     *     ## 整合性チェック
     *     - **answerTypeとsolution**: 回答形式と解答内容の整合性を確認
     *     - **タグ検証**: 存在するタグIDのみ受け入れ
     *     - **作成者存在確認**: creatorId変更時のユーザー存在確認
     *
     *     ## 更新後の動作
     *     - 更新されたクイズは承認待ち状態に戻る（pending_approval）
     *     - 管理者に再レビュー通知を送信
     *     - 更新履歴の詳細記録（変更フィールドと変更者）
     *
     *     ## 使用場面
     *     - **内容修正**: 誤字脱字や解答間違いの修正
     *     - **形式変更**: 回答形式や選択肢の追加・変更
     *     - **管理業務**: 作成者変更や大幅な内容修正
     *     - **品質向上**: 解説の充実化やタグ分類の見直し */
    patch: operations["QuizManagement_updateQuiz"];
    trace?: never;
  };
  "/api/search/v1/quizzes": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 高度なフィルタリング、ソート、ページネーション機能を持つクイズ検索API
     *
     *     ## 機能
     *     - **全文検索**: 問題文、解説、タグ全体での横断検索
     *     - **高度なフィルタリング**: 難易度、回答タイプ、作成者、日付などによる絞り込み
     *     - **スマートタグ処理**: 肯定・否定両方のタグフィルター対応
     *     - **柔軟なソート**: 複数ソート項目での昇順・降順指定
     *     - **ページネーション**: 効率的なオフセットベースページング（カスタマイズ可能なページサイズ）
     *
     *     ## 特殊構文
     *     - **方向付きソート**: 降順指定は`-`プレフィックス使用（例：`sort=-created_date`で最新順）
     *     - **タグ除外**: 除外指定は`~`プレフィックス使用（例：`tags=~beginner`で初心者レベル除外）
     *     - **複合タグフィルター**: 肯定・否定タグの組み合わせ可能（例：`tags=javascript&tags=~beginner`）
     *
     *     ## 使用例
     *     - 基本検索: `?q=JavaScript`
     *     - 高度なフィルタリング: `?q=配列&tags=javascript&difficulty=intermediate&sort=-created_date`
     *     - カテゴリ除外: `?tags=programming&tags=~tutorial&min_correct_rate=0.8`
     *     - ID除外: `?q=React&exclude_ids=quiz-id-1&exclude_ids=quiz-id-2`（特定のクイズを除外した検索） */
    get: operations["Search_searchQuizzes"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Answer:
      | components["schemas"]["BooleanAnswer"]
      | components["schemas"]["FreeTextAnswer"]
      | components["schemas"]["SingleChoiceAnswer"]
      | components["schemas"]["MultipleChoiceAnswer"];
    AnswerId: string;
    /** @enum {string} */
    AnswerType: "boolean" | "free_text" | "single_choice" | "multiple_choice";
    ApprovalRequest: {
      /** @enum {string} */
      decision: "approved" | "rejected";
      reviewerNotes?: string;
      /** @default true */
      publishImmediately: boolean;
    };
    Attempt: {
      id: components["schemas"]["AttemptId"];
      quizId: components["schemas"]["QuizId"];
      sessionId: components["schemas"]["SessionId"];
      userId: components["schemas"]["UserId"];
      answerType: components["schemas"]["AnswerType"];
      answerId: components["schemas"]["AnswerId"];
      isCorrect: boolean;
      answeredAt: components["schemas"]["UtcDateTime"];
    };
    AttemptHistoryResponse: {
      items: components["schemas"]["AttemptWithAnswer"][];
      /** Format: int32 */
      totalCount: number;
      hasMore: boolean;
      continuationToken?: string;
    };
    AttemptId: string;
    AttemptStatistics: {
      /** Format: int32 */
      totalAttempts: number;
      /** Format: int32 */
      correctAttempts: number;
      /** Format: int32 */
      incorrectAttempts: number;
      /** Format: float */
      averageCorrectRate: number;
      byAnswerType: Record<string, never>;
      /** Format: int32 */
      recentStreak: number;
    };
    AttemptWithAnswer: {
      id: components["schemas"]["AttemptId"];
      quizId: components["schemas"]["QuizId"];
      sessionId: components["schemas"]["SessionId"];
      userId: components["schemas"]["UserId"];
      answerType: components["schemas"]["AnswerType"];
      answerId: components["schemas"]["AnswerId"];
      isCorrect: boolean;
      answeredAt: components["schemas"]["UtcDateTime"];
      answer: components["schemas"]["Answer"];
    };
    BooleanAnswer: {
      /** @enum {string} */
      type: "boolean";
      id: components["schemas"]["AnswerId"];
      value: boolean;
    };
    BooleanSolution: {
      /** @enum {string} */
      type: "boolean";
      id: components["schemas"]["SolutionId"];
      value: boolean;
    };
    BooleanSolutionCreate: {
      /** @enum {string} */
      type: "boolean";
      value: boolean;
    };
    Choice: {
      id: components["schemas"]["ChoiceId"];
      solutionId: components["schemas"]["SolutionId"];
      text: string;
      /** Format: int32 */
      orderIndex: number;
      isCorrect: boolean;
    };
    ChoiceCreate: {
      text: string;
      /** Format: int32 */
      orderIndex: number;
      isCorrect: boolean;
    };
    ChoiceId: string;
    ConflictError: {
      /** @enum {number} */
      code: 409;
      /** @enum {string} */
      message: "Resource conflict";
    } & WithRequired<
      components["schemas"]["ErrorResponse"],
      "code" | "message"
    >;
    CreateDeckFromSearchRequest: {
      searchQuery: string;
      filters?: components["schemas"]["QuizSearchFilters"];
      /**
       * Format: int32
       * @default 50
       */
      maxQuizzes: number;
      name?: string;
      description?: string;
    };
    CreateDeckRequest: {
      name?: string;
      description?: string;
      quizIds: components["schemas"]["QuizId"][];
      /** @enum {string} */
      source: "manual_selection" | "search_result" | "wrong_questions";
      sourceQuery?: string;
      /**
       * Format: int32
       * @default 100
       */
      maxQuizzes: number;
      /** @default false */
      shuffleOrder: boolean;
    };
    CreateDeckResponse: {
      deck: components["schemas"]["Deck"];
      session?: components["schemas"]["QuizSession"];
    };
    CreateQuizRequest: {
      question: string;
      answerType: components["schemas"]["AnswerType"];
      solution: components["schemas"]["SolutionCreate"];
      explanation?: string;
      tags?: string[];
    };
    CreateQuizResponse: {
      quiz: components["schemas"]["Quiz"];
      /** @enum {string} */
      status: "pending_approval";
      estimatedApprovalDate?: components["schemas"]["UtcDateTime"];
    };
    CreateUserAccountRequest: {
      name: string;
      email?: string;
    };
    CreateUserAccountResponse: {
      userAccount: components["schemas"]["UserAccount"];
      userIdentity: components["schemas"]["UserIdentity"];
    };
    Deck: {
      id: components["schemas"]["DeckId"];
      name: string;
      description?: string;
      quizIds: components["schemas"]["QuizId"][];
      creatorId: components["schemas"]["UserId"];
      createdAt: components["schemas"]["UtcDateTime"];
      lastModifiedAt: components["schemas"]["UtcDateTime"];
    };
    DeckId: string;
    DeckListResponse: {
      items: components["schemas"]["DeckWithQuizzes"][];
      /** Format: int32 */
      totalCount: number;
      hasMore: boolean;
      continuationToken?: string;
    };
    DeckWithQuizzes: {
      id: components["schemas"]["DeckId"];
      name: string;
      description?: string;
      quizIds: components["schemas"]["QuizId"][];
      creatorId: components["schemas"]["UserId"];
      createdAt: components["schemas"]["UtcDateTime"];
      lastModifiedAt: components["schemas"]["UtcDateTime"];
      quizzes: components["schemas"]["QuizWithSolution"][];
      /** Format: int32 */
      totalQuizzes: number;
    };
    ErrorResponse: {
      /** Format: int32 */
      code: number;
      message: string;
      details?: string;
      requestId?: string;
    };
    ForbiddenError: {
      /** @enum {number} */
      code: 403;
      /** @enum {string} */
      message: "Forbidden operation";
    } & WithRequired<
      components["schemas"]["ErrorResponse"],
      "code" | "message"
    >;
    FreeTextAnswer: {
      /** @enum {string} */
      type: "free_text";
      id: components["schemas"]["AnswerId"];
      text: string;
    };
    FreeTextSolution: {
      /** @enum {string} */
      type: "free_text";
      id: components["schemas"]["SolutionId"];
      correctAnswer: string;
      /** @default exact */
      matchingStrategy: components["schemas"]["MatchingStrategy"];
      /** @default false */
      caseSensitive: boolean;
    };
    FreeTextSolutionCreate: {
      /** @enum {string} */
      type: "free_text";
      correctAnswer: string;
      /** @default exact */
      matchingStrategy: components["schemas"]["MatchingStrategy"];
      /** @default false */
      caseSensitive: boolean;
    };
    InternalServerError: {
      /** @enum {number} */
      code: 500;
      /** @enum {string} */
      message: "Internal server error";
    } & WithRequired<
      components["schemas"]["ErrorResponse"],
      "code" | "message"
    >;
    /** @enum {string} */
    MatchingStrategy: "exact" | "partial" | "regex";
    MultipleChoiceAnswer: {
      /** @enum {string} */
      type: "multiple_choice";
      id: components["schemas"]["AnswerId"];
      selectedChoiceIds: components["schemas"]["ChoiceId"][];
    };
    MultipleChoiceSolution: {
      /** @enum {string} */
      type: "multiple_choice";
      id: components["schemas"]["SolutionId"];
      /**
       * Format: int32
       * @default 1
       */
      minCorrectAnswers: number;
      choices: components["schemas"]["Choice"][];
    };
    MultipleChoiceSolutionCreate: {
      /** @enum {string} */
      type: "multiple_choice";
      /**
       * Format: int32
       * @default 1
       */
      minCorrectAnswers: number;
      choices: components["schemas"]["ChoiceCreate"][];
    };
    NotFoundError: {
      /** @enum {number} */
      code: 404;
    } & WithRequired<components["schemas"]["ErrorResponse"], "code">;
    PaginationRequest: {
      /**
       * Format: int32
       * @description Maximum number of items to return per page (1-100). Default: 20
       * @default 20
       */
      limit: number;
      /**
       * Format: int32
       * @description Number of items to skip from the beginning of the result set. Default: 0
       * @default 0
       */
      offset: number;
      /** @description Token for cursor-based pagination (optional, for future implementation) */
      continuationToken?: string;
    };
    Quiz: {
      id: components["schemas"]["QuizId"];
      question: string;
      answerType: components["schemas"]["AnswerType"];
      solutionId: components["schemas"]["SolutionId"];
      explanation?: string;
      status: components["schemas"]["QuizStatus"];
      creatorId: components["schemas"]["UserId"];
      createdAt: components["schemas"]["UtcDateTime"];
      approvedAt?: components["schemas"]["UtcDateTime"];
    };
    QuizId: string;
    QuizSearchFilters: {
      tags?: string[];
      difficulty?: string;
      answerType?: components["schemas"]["AnswerType"];
      /** @default approved */
      status: components["schemas"]["QuizStatus"];
      creatorId?: components["schemas"]["UserId"];
    };
    QuizSession: {
      id: components["schemas"]["SessionId"];
      deckId: components["schemas"]["DeckId"];
      creatorId: components["schemas"]["UserId"];
      deviceFingerprint: string;
      startedAt: components["schemas"]["UtcDateTime"];
      completedAt?: components["schemas"]["UtcDateTime"];
      /** @default false */
      isCompleted: boolean;
    };
    QuizSessionWithProgress: {
      id: components["schemas"]["SessionId"];
      deckId: components["schemas"]["DeckId"];
      creatorId: components["schemas"]["UserId"];
      deviceFingerprint: string;
      startedAt: components["schemas"]["UtcDateTime"];
      completedAt?: components["schemas"]["UtcDateTime"];
      /** @default false */
      isCompleted: boolean;
      deck: components["schemas"]["Deck"];
      progress: components["schemas"]["SessionProgress"];
    };
    /** @enum {string} */
    QuizStatus: "pending_approval" | "approved" | "rejected";
    QuizSummary: {
      id: components["schemas"]["QuizId"];
      question: string;
      answerType: components["schemas"]["AnswerType"];
      solutionId: components["schemas"]["SolutionId"];
      explanation?: string;
      status: components["schemas"]["QuizStatus"];
      creatorId: components["schemas"]["UserId"];
      createdAt: components["schemas"]["UtcDateTime"];
      approvedAt?: components["schemas"]["UtcDateTime"];
      tagIds: string[];
    };
    QuizSummaryListResponse: {
      items: components["schemas"]["QuizSummary"][];
      /** Format: int32 */
      totalCount: number;
      hasMore: boolean;
      continuationToken?: string;
    };
    QuizTagId: string;
    QuizWithSolution: {
      id: components["schemas"]["QuizId"];
      question: string;
      answerType: components["schemas"]["AnswerType"];
      solutionId: components["schemas"]["SolutionId"];
      explanation?: string;
      status: components["schemas"]["QuizStatus"];
      creatorId: components["schemas"]["UserId"];
      createdAt: components["schemas"]["UtcDateTime"];
      approvedAt?: components["schemas"]["UtcDateTime"];
      solution: components["schemas"]["Solution"];
      tags?: string[];
    };
    RateLimitError: {
      /** @enum {number} */
      code: 429;
    } & WithRequired<components["schemas"]["ErrorResponse"], "code">;
    /** @enum {string} */
    RelationType: "hierarchy" | "category" | "synonym" | "related";
    SessionId: string;
    SessionListResponse: {
      items: components["schemas"]["QuizSessionWithProgress"][];
      /** Format: int32 */
      totalCount: number;
      hasMore: boolean;
      continuationToken?: string;
    };
    SessionProgress: {
      /** Format: int32 */
      totalQuizzes: number;
      /** Format: int32 */
      answeredQuizzes: number;
      /** Format: int32 */
      correctAnswers: number;
      /** Format: int32 */
      incorrectAnswers: number;
      /** Format: float */
      progressPercentage: number;
      /** Format: int32 */
      currentQuizIndex?: number;
      nextQuizId?: components["schemas"]["QuizId"];
    };
    SingleChoiceAnswer: {
      /** @enum {string} */
      type: "single_choice";
      id: components["schemas"]["AnswerId"];
      selectedChoiceId: components["schemas"]["ChoiceId"];
    };
    SingleChoiceSolution: {
      /** @enum {string} */
      type: "single_choice";
      id: components["schemas"]["SolutionId"];
      choices: components["schemas"]["Choice"][];
    };
    SingleChoiceSolutionCreate: {
      /** @enum {string} */
      type: "single_choice";
      choices: components["schemas"]["ChoiceCreate"][];
    };
    Solution:
      | components["schemas"]["BooleanSolution"]
      | components["schemas"]["FreeTextSolution"]
      | components["schemas"]["SingleChoiceSolution"]
      | components["schemas"]["MultipleChoiceSolution"];
    SolutionCreate:
      | components["schemas"]["BooleanSolutionCreate"]
      | components["schemas"]["FreeTextSolutionCreate"]
      | components["schemas"]["SingleChoiceSolutionCreate"]
      | components["schemas"]["MultipleChoiceSolutionCreate"];
    SolutionId: string;
    StartSessionRequest: {
      deckId: components["schemas"]["DeckId"];
      deviceFingerprint: string;
      /** @default false */
      shuffleQuizzes: boolean;
    };
    StartSessionResponse: {
      session: components["schemas"]["QuizSessionWithProgress"];
      firstQuiz?: components["schemas"]["QuizWithSolution"];
    };
    SubmitAnswerRequest: {
      sessionId: components["schemas"]["SessionId"];
      quizId: components["schemas"]["QuizId"];
      answer: components["schemas"]["Answer"];
    };
    SubmitAnswerResponse: {
      attempt: components["schemas"]["AttemptWithAnswer"];
      isCorrect: boolean;
      explanation?: string;
      correctAnswer: components["schemas"]["Answer"];
    };
    Tag: {
      id: components["schemas"]["TagId"];
      name: string;
      type: components["schemas"]["TagType"];
      createdBy?: components["schemas"]["UserId"];
      createdAt: components["schemas"]["UtcDateTime"];
    };
    TagId: string;
    TagRelationId: string;
    /** @enum {string} */
    TagType: "official" | "user";
    UnauthorizedError: {
      /** @enum {number} */
      code: 401;
      /** @enum {string} */
      message: "Unauthorized access";
    } & WithRequired<
      components["schemas"]["ErrorResponse"],
      "code" | "message"
    >;
    UpdateQuizRequest: {
      question?: string;
      answerType?: components["schemas"]["AnswerType"];
      solution?: components["schemas"]["SolutionCreate"];
      explanation?: string;
      tags?: string[];
      creatorId?: components["schemas"]["UserId"];
    };
    UpdateSessionRequest: {
      isCompleted?: boolean;
    };
    UpdateUserAccountRequest: {
      name?: string;
      email?: string;
    };
    UserAccount: {
      id: components["schemas"]["UserAccountId"];
      name: string;
      email?: string;
      createdAt: components["schemas"]["UtcDateTime"];
    };
    UserAccountId: string;
    UserId: string;
    UserIdentity: {
      id: components["schemas"]["UserId"];
      anonymousId: string;
      userAccountId?: components["schemas"]["UserAccountId"];
      createdAt: components["schemas"]["UtcDateTime"];
    };
    UserProfileResponse: {
      userAccount?: components["schemas"]["UserAccount"];
      userIdentity: components["schemas"]["UserIdentity"];
      statistics: components["schemas"]["UserStatistics"];
    };
    UserStatistics: {
      /** Format: int32 */
      totalQuizzes: number;
      /** Format: int32 */
      totalAttempts: number;
      /** Format: int32 */
      correctAnswers: number;
      /** Format: float */
      averageCorrectRate: number;
      /** Format: int32 */
      streak: number;
    };
    UtcDateTime: string;
    ValidationError: {
      /** @enum {number} */
      code: 400;
      fieldErrors?: Record<string, never>;
    } & WithRequired<components["schemas"]["ErrorResponse"], "code">;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  QuizManagement_listQuizzes: {
    parameters: {
      query?: {
        /** @description ステータス別フィルター（複数指定可能）。指定されない場合は全ステータス（権限に応じて） */
        status?: components["schemas"]["QuizStatus"][];
        /** @description 作成者ID別フィルター（複数指定可能）。特定ユーザーの作成クイズのみ取得 */
        creatorId?: components["schemas"]["UserId"][];
        /** @description クイズID配列による指定取得。複数IDの一括取得に使用 */
        quizId?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaginationRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuizSummaryListResponse"];
        };
      };
    };
  };
  QuizManagement_createQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description 新しいクイズの作成情報を含むリクエスト */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateQuizRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuizWithSolution"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["ValidationError"]
            | components["schemas"]["RateLimitError"];
        };
      };
    };
  };
  QuizManagement_getQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 取得対象のクイズID（UUID形式） */
        id: components["schemas"]["QuizId"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuizWithSolution"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NotFoundError"];
        };
      };
    };
  };
  QuizManagement_deleteQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 削除対象のクイズID（UUID形式） */
        id: components["schemas"]["QuizId"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description There is no content to send for this request, but the headers may be useful.  */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description An unexpected error response. */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["NotFoundError"]
            | components["schemas"]["ForbiddenError"];
        };
      };
    };
  };
  QuizManagement_updateQuiz: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description 更新対象のクイズID（UUID形式） */
        id: components["schemas"]["QuizId"];
      };
      cookie?: never;
    };
    /** @description 更新情報を含むリクエスト（部分更新対応） */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateQuizRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuizWithSolution"];
        };
      };
      /** @description An unexpected error response. */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json":
            | components["schemas"]["NotFoundError"]
            | components["schemas"]["ForbiddenError"]
            | components["schemas"]["ValidationError"];
        };
      };
    };
  };
  Search_searchQuizzes: {
    parameters: {
      query?: {
        /** @description 問題文、解説、関連タグ全体での全文検索クエリ */
        q?: string;
        /** @description クイズ分類用タグフィルター。包含・除外両方の指定が可能：
         *     - 包含タグ: `tags=javascript` または `tags=javascript&tags=react`
         *     - 除外タグ: `tags=~beginner` (初心者レベルコンテンツを除外)
         *     - 混合フィルター: `tags=javascript&tags=~tutorial` (JavaScriptを含み、チュートリアルを除外) */
        tags?: string[];
        /** @description 難易度レベルによるフィルター。一般的な値：'beginner'、'intermediate'、'advanced' */
        difficulty?: string;
        /** @description 回答タイプによるフィルター。有効な値：'boolean'、'free_text'、'single_choice'、'multiple_choice' */
        answer_type?: components["schemas"]["AnswerType"];
        /** @description 作成者のユーザーIDによるフィルター（UUID形式） */
        creator_id?: components["schemas"]["UserId"];
        /** @description 除外するクイズのID配列。指定されたIDのクイズを検索結果から除外 */
        exclude_ids?: components["schemas"]["QuizId"][];
        /** @description 最小正答率フィルター（0.0〜1.0）。例：0.8で正答率80%以上のクイズのみ */
        min_correct_rate?: number;
        /** @description 最大正答率フィルター（0.0〜1.0）。例：0.5で正答率50%以下のクイズのみ */
        max_correct_rate?: number;
        /** @description 指定日時以降に作成されたクイズをフィルター（ISO 8601形式）。例：'2024-01-01T00:00:00Z' */
        created_after?: string;
        /** @description 指定日時以前に作成されたクイズをフィルター（ISO 8601形式）。例：'2024-12-31T23:59:59Z' */
        created_before?: string;
        /** @description 方向プレフィックス付きソート項目：
         *     - 利用可能項目：'relevance'、'created_date'、'popularity'、'difficulty'
         *     - 昇順：`sort=created_date`（デフォルト）
         *     - 降順：`sort=-created_date`（マイナス記号をプレフィックス）
         *     - デフォルト：キーワード検索時は'relevance'、それ以外は'created_date' */
        sort?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PaginationRequest"];
      };
    };
    responses: {
      /** @description The request has succeeded. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["QuizSummaryListResponse"];
        };
      };
    };
  };
}
type WithRequired<T, K extends keyof T> = T & {
  [P in K]-?: T[P];
};
